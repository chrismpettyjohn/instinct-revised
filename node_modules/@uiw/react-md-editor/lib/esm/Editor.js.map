{"version":3,"sources":["../../src/Editor.tsx"],"names":["React","Fragment","useMemo","useRef","useState","classnames","MarkdownPreview","TextArea","Toolbar","DragBar","getCommands","TextAreaCommandOrchestrator","setGroupPopFalse","data","Object","keys","forEach","keyname","InternalMDEditor","props","ref","prefixCls","className","propsValue","value","commands","height","heightWarp","visiableDragbar","preview","previewType","isfullscreen","fullscreen","previewOptions","textareaProps","maxHeight","minHeight","autoFocus","tabSize","onChange","hideToolbar","other","setValue","setPreview","isFullscreen","setIsFullscreen","groupPop","setGroupPop","leftScroll","previewRef","createRef","setHeight","textarea","commandOrchestrator","selectionRange","count","scrollTop","cls","commandOrchestratorHandle","current","text","handleTextAreaMount","isMount","warp","blur","focus","selectionStart","selectionEnd","scrollTo","modifySelectionRange","handleChange","event","target","handleCommand","command","groupName","keyCommand","document","body","style","overflow","executeCommand","handleScroll","e","mdp","previewDom","textareaDom","scale","scrollHeight","offsetHeight","chestratorObj","mdProps","onScroll","source","Number","getState","textApi","test","newHeight","MDEditor","forwardRef","Markdown"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useMemo, useRef, useState } from 'react';\nimport classnames from 'classnames';\nimport MarkdownPreview, { MarkdownPreviewProps, MarkdownPreviewRef } from '@uiw/react-markdown-preview';\nimport { IProps } from './utils';\nimport TextArea, { ITextAreaProps, TextAreaRef } from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, TextAreaCommandOrchestrator, ICommand } from './commands';\nimport './index.less';\n\nexport type PreviewType = 'live' | 'edit' | 'preview';\n\nexport interface MDEditorProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'>, IProps {\n  /**\n   * The Markdown value.\n   */\n  value?: string;\n  /**\n   * Event handler for the `onChange` event.\n   */\n  onChange?: (value?: string) => void;\n  /**\n   * Can be used to make `Markdown Editor` focus itself on initialization. Defaults to on.\n   * it will be set to true when either the source `textarea` is focused,\n   * or it has an `autofocus` attribute and no other element is focused.\n   */\n  autoFocus?: ITextAreaProps['autoFocus'];\n  /**\n   * The height of the editor.\n   */\n  height?: React.CSSProperties['height'];\n  /**\n   * Show drag and drop tool. Set the height of the editor.\n   */\n  visiableDragbar?: boolean;\n  /**\n   * Show markdown preview.\n   */\n  preview?: PreviewType;\n  fullscreen?: boolean;\n  /**\n   * Maximum drag height. `visiableDragbar=true`\n   */\n  maxHeight?: number;\n  /**\n   * Minimum drag height. `visiableDragbar=true`\n   */\n  minHeight?: number;\n  /**\n   * This is reset [react-markdown](https://github.com/rexxars/react-markdown) settings.\n   */\n  previewOptions?: Omit<MarkdownPreviewProps, 'source'>;\n  /**\n   * Set the `textarea` related props.\n   */\n  textareaProps?: ITextAreaProps;\n  /**\n   * The number of characters to insert when pressing tab key.\n   * Default `2` spaces.\n   */\n  tabSize?: number;\n  /**\n   * You can create your own commands or reuse existing commands.\n   */\n  commands?: ICommand[];\n  /**\n   * Hide the tool bar\n   */\n  hideToolbar?: boolean;\n}\n\nfunction setGroupPopFalse(data: Record<string, boolean>) {\n  Object.keys(data).forEach((keyname) => {\n    data[keyname] = false;\n  });\n  return data;\n}\n\nconst InternalMDEditor = (\n  props: MDEditorProps,\n  ref?: ((instance: HTMLDivElement) => void) | React.RefObject<HTMLDivElement | null> | null,\n) => {\n  const {\n    prefixCls = 'w-md-editor',\n    className,\n    value: propsValue,\n    commands = getCommands(),\n    height: heightWarp = 200,\n    visiableDragbar = true,\n    preview: previewType = 'live',\n    fullscreen: isfullscreen,\n    previewOptions,\n    textareaProps,\n    maxHeight = 1200,\n    minHeight = 100,\n    autoFocus,\n    tabSize = 2,\n    onChange,\n    hideToolbar,\n    ...other\n  } = props || {};\n  const [value, setValue] = useState<string>(propsValue || '');\n  const [preview, setPreview] = useState<PreviewType>(previewType);\n  const [isFullscreen, setIsFullscreen] = useState(isfullscreen || false);\n  const [groupPop, setGroupPop] = useState<Record<string, boolean>>({});\n\n  const leftScroll = useRef(false);\n  const previewRef = React.createRef<MarkdownPreviewRef>();\n\n  const [height, setHeight] = useState(heightWarp);\n  const textarea = React.createRef<TextAreaRef>();\n  const commandOrchestrator = useRef<TextAreaCommandOrchestrator>();\n  const selectionRange = useRef<{ count: number; scrollTop: number }>({ count: 0, scrollTop: 0 });\n\n  const cls = classnames(className, prefixCls, {\n    [`${prefixCls}-show-${preview}`]: preview,\n    [`${prefixCls}-fullscreen`]: isFullscreen,\n  });\n\n  const commandOrchestratorHandle = () => {\n    if (textarea.current && textarea.current.text) {\n      commandOrchestrator.current = new TextAreaCommandOrchestrator(\n        (textarea.current.text || null) as HTMLTextAreaElement,\n      );\n    }\n    return commandOrchestrator.current;\n  };\n\n  useMemo(() => preview !== props.preview && props.preview && setPreview(props.preview!), [props.preview]);\n  useMemo(() => value !== props.value && setValue(props.value!), [props.value]);\n  useMemo(() => height !== props.height && setHeight(heightWarp!), [heightWarp]);\n  function handleTextAreaMount(isMount: boolean) {\n    if (textarea.current && textarea.current.text && textarea.current.warp && isMount) {\n      textarea.current.text.blur();\n      textarea.current.text.focus();\n      textarea.current.text.selectionStart = selectionRange.current.count;\n      textarea.current.text.selectionEnd = selectionRange.current.count;\n      textarea.current.warp.scrollTo(0, selectionRange.current.scrollTop!);\n    }\n  }\n  function modifySelectionRange() {\n    if (textarea.current && textarea.current.text && textarea.current.warp) {\n      selectionRange.current.count = textarea.current.text.selectionStart;\n      selectionRange.current.scrollTop = textarea.current.warp.scrollTop;\n    }\n  }\n  function handleChange(event: React.ChangeEvent<HTMLTextAreaElement>) {\n    modifySelectionRange();\n    setValue(event.target.value!);\n    onChange && onChange(event.target.value || '');\n  }\n  function handleCommand(command: ICommand, groupName?: string) {\n    commandOrchestratorHandle();\n    modifySelectionRange();\n    if (command.keyCommand === 'preview') {\n      setPreview(command.value as PreviewType);\n    }\n    if (command.keyCommand === 'fullscreen') {\n      setIsFullscreen(!isFullscreen);\n      document.body.style.overflow = isFullscreen ? 'initial' : 'hidden';\n    }\n    if (command.keyCommand === 'group') {\n      setGroupPop({ ...setGroupPopFalse(groupPop), [`${groupName}`]: true });\n    }\n    if (groupName && command.keyCommand !== 'group') {\n      setGroupPop({ ...groupPop, [`${groupName}`]: false });\n    }\n    commandOrchestrator.current && commandOrchestrator.current!.executeCommand(command);\n  }\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    if (!textarea.current || !previewRef.current || !previewRef.current.mdp.current || !textarea.current.warp) {\n      return;\n    }\n    const previewDom = previewRef.current.mdp.current;\n    const textareaDom = textarea.current.warp;\n    if (textareaDom && previewDom) {\n      const scale =\n        (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);\n      if (e.target === textareaDom && leftScroll.current) {\n        previewDom.scrollTop = textareaDom.scrollTop / scale;\n      }\n      if (e.target === previewDom && !leftScroll.current) {\n        textareaDom.scrollTop = previewDom.scrollTop * scale;\n      }\n    }\n  }\n  const chestratorObj = useMemo(() => commandOrchestratorHandle(), [textarea.current, commandOrchestrator.current]);\n  const mdProps = ({\n    ...previewOptions,\n    ref: previewRef,\n    onScroll: handleScroll,\n    source: value,\n  } as unknown) as MarkdownPreviewProps;\n  return (\n    <Fragment>\n      <div\n        className={cls}\n        onClick={() => setGroupPop({ ...setGroupPopFalse(groupPop) })}\n        style={{ height: isFullscreen ? '100%' : hideToolbar ? Number(height) - 29 : height }}\n        {...other}\n      >\n        {!hideToolbar && (\n          <Toolbar\n            active={{\n              fullscreen: isFullscreen,\n              preview: preview,\n              ...groupPop,\n            }}\n            prefixCls={prefixCls}\n            commands={commands}\n            commandHelp={{\n              getState: commandOrchestrator.current && commandOrchestrator.current!.getState,\n              textApi: commandOrchestrator.current && commandOrchestrator.current!.textApi,\n              ...chestratorObj,\n            }}\n            onCommand={handleCommand}\n          />\n        )}\n        <div\n          className={`${prefixCls}-content`}\n          style={{ height: isFullscreen ? 'calc(100% - 29px)' : Number(height) - 29 }}\n        >\n          {/(edit|live)/.test(preview as string) && (\n            <TextArea\n              ref={textarea}\n              tabSize={tabSize}\n              className={`${prefixCls}-input`}\n              prefixCls={prefixCls}\n              value={value}\n              autoFocus={autoFocus}\n              {...textareaProps}\n              onScroll={handleScroll}\n              onMouseOver={() => (leftScroll.current = true)}\n              onMouseLeave={() => (leftScroll.current = false)}\n              onMount={handleTextAreaMount}\n              onChange={handleChange}\n            />\n          )}\n          {/(live|preview)/.test(preview as string) && (\n            <MarkdownPreview {...mdProps} className={`${prefixCls}-preview`} />\n          )}\n        </div>\n        {visiableDragbar && !isFullscreen && (\n          <DragBar\n            prefixCls={prefixCls}\n            height={height as number}\n            maxHeight={maxHeight!}\n            minHeight={minHeight!}\n            onChange={(newHeight) => {\n              setHeight(newHeight);\n            }}\n          />\n        )}\n      </div>\n    </Fragment>\n  );\n};\n\nconst MDEditor = React.forwardRef<HTMLDivElement, MDEditorProps>(InternalMDEditor);\n\ntype MDEditor = typeof MDEditor & {\n  Markdown: typeof MarkdownPreview;\n};\n\n(MDEditor as MDEditor).Markdown = MarkdownPreview;\n\nexport default MDEditor as MDEditor;\n"]}