{"version":3,"sources":["../../../src/commands/index.ts"],"names":["bold","code","italic","link","unorderedListCommand","orderedListCommand","checkedListCommand","quote","hr","title","title1","title2","title3","title4","title5","title6","group","divider","codePreview","codeEdit","codeLive","fullscreen","image","strikethrough","insertText","getCommands","getStateFromTextArea","textArea","selection","start","selectionStart","end","selectionEnd","text","value","selectedText","slice","TextAreaTextApi","focus","TextAreaCommandOrchestrator","textApi","command","execute"],"mappings":"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","sourcesContent":["import { bold } from './bold';\nimport { code } from './code';\nimport { italic } from './italic';\nimport { link } from './link';\nimport { unorderedListCommand, orderedListCommand, checkedListCommand } from './list';\nimport { quote } from './quote';\nimport { hr } from './hr';\nimport { title } from './title';\nimport { title1 } from './title1';\nimport { title2 } from './title2';\nimport { title3 } from './title3';\nimport { title4 } from './title4';\nimport { title5 } from './title5';\nimport { title6 } from './title6';\nimport { group } from './group';\nimport { divider } from './divider';\nimport { codePreview, codeEdit, codeLive } from './preview';\nimport { fullscreen } from './fullscreen';\nimport { image } from './image';\nimport { strikethrough } from './strikeThrough';\nimport insertText from '../utils/InsertTextAtPosition';\n\nexport interface CommandOrchestrator {\n  executeCommand(command: ICommand): void;\n}\nexport type ICommandChildHandleParam = {\n  getState?: TextAreaCommandOrchestrator['getState'];\n  textApi?: TextApi;\n};\nexport type ICommandChildHandle = {\n  children?: (handle: { close: () => void; execute: () => void } & ICommandChildHandleParam) => React.ReactElement;\n};\nexport type ICommandChildCommands<T = string> = {\n  children?: Array<ICommand<T>>;\n};\n\nexport type ICommand<T = string> = {\n  keyCommand?: string;\n  name?: string;\n  groupName?: string;\n  icon?: React.ReactElement;\n  value?: T;\n  position?: 'right';\n  liProps?: React.LiHTMLAttributes<HTMLLIElement>;\n  buttonProps?: React.ButtonHTMLAttributes<HTMLButtonElement> | null;\n  execute?: (state: TextState, api: TextApi) => void;\n} & ICommandChildCommands &\n  ICommandChildHandle;\n\nexport interface TextRange {\n  start: number;\n  end: number;\n}\n\nexport interface TextState {\n  text: string;\n  selectedText: string;\n  selection: TextRange;\n}\n\nexport interface TextApi {\n  /**\n   * Replaces the current selection with the new text. This will make the new selectedText to be empty, the\n   * selection start and selection end will be the same and will both point to the end\n   * @param text Text that should replace the current selection\n   */\n  replaceSelection(text: string): TextState;\n\n  /**\n   * Selects the specified text range\n   * @param selection\n   */\n  setSelectionRange(selection: TextRange): TextState;\n}\n\nconst getCommands: () => ICommand[] = () => [\n  bold,\n  italic,\n  strikethrough,\n  hr,\n  title,\n  divider,\n  link,\n  quote,\n  code,\n  image,\n  divider,\n  unorderedListCommand,\n  orderedListCommand,\n  checkedListCommand,\n  divider,\n  codeEdit,\n  codeLive,\n  codePreview,\n  divider,\n  fullscreen,\n];\n\nfunction getStateFromTextArea(textArea: HTMLTextAreaElement): TextState {\n  return {\n    selection: {\n      start: textArea.selectionStart,\n      end: textArea.selectionEnd,\n    },\n    text: textArea.value,\n    selectedText: textArea.value.slice(textArea.selectionStart, textArea.selectionEnd),\n  };\n}\n\nclass TextAreaTextApi implements TextApi {\n  textArea: HTMLTextAreaElement;\n\n  constructor(textArea: HTMLTextAreaElement) {\n    this.textArea = textArea;\n  }\n\n  replaceSelection(text: string): TextState {\n    insertText(this.textArea, text);\n    return getStateFromTextArea(this.textArea);\n  }\n\n  setSelectionRange(selection: TextRange): TextState {\n    this.textArea.focus();\n    this.textArea.selectionStart = selection.start;\n    this.textArea.selectionEnd = selection.end;\n    return getStateFromTextArea(this.textArea);\n  }\n}\n\nclass TextAreaCommandOrchestrator implements CommandOrchestrator {\n  textArea: HTMLTextAreaElement;\n  textApi: TextApi;\n\n  constructor(textArea: HTMLTextAreaElement) {\n    this.textArea = textArea;\n    this.textApi = new TextAreaTextApi(textArea);\n  }\n\n  getState() {\n    if (!this.textArea) return false;\n    return getStateFromTextArea(this.textArea);\n  }\n\n  executeCommand(command: ICommand<string>): void {\n    command.execute && command.execute(getStateFromTextArea(this.textArea), this.textApi);\n  }\n}\n\nexport {\n  // Toolbars.\n  title,\n  title1,\n  title2,\n  title3,\n  title4,\n  title5,\n  title6,\n  bold,\n  italic,\n  strikethrough,\n  hr,\n  group,\n  divider,\n  link,\n  quote,\n  code,\n  image,\n  unorderedListCommand,\n  orderedListCommand,\n  checkedListCommand,\n  codeEdit,\n  codeLive,\n  codePreview,\n  fullscreen,\n  // Tool method.\n  getCommands,\n  getStateFromTextArea,\n  TextAreaCommandOrchestrator,\n  TextAreaTextApi,\n};\n"]}