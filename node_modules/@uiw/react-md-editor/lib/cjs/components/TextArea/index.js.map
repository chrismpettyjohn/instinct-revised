{"version":3,"sources":["../../../../src/components/TextArea/index.tsx"],"names":["React","forwardRef","props","ref","prefixCls","className","onChange","onMount","onScroll","tabSize","style","otherProps","warp","createRef","preElm","textElm","text","current","value","setValue","highlight","pre","html","Prism","languages","markdown","innerHTML","autoFocus","focus","hotkeys","bind","e","target"],"mappings":"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","sourcesContent":["import React, { useEffect, useImperativeHandle, useMemo, useState } from 'react';\nimport classnames from 'classnames';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-markdown.js';\nimport { IProps } from '../../utils';\nimport hotkeys, { IHotkeyOptions } from './hotkeys';\nimport './index.less';\n\nexport interface ITextAreaProps\n  extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'value' | 'onChange' | 'onScroll'>,\n    IProps {\n  onChange?: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onMount?: (isMount: boolean) => void;\n  onScroll?: (e: React.UIEvent<HTMLDivElement>) => void;\n  value?: string;\n  tabSize?: number;\n}\n\nexport type TextAreaRef = {\n  text?: HTMLTextAreaElement;\n  warp?: HTMLDivElement;\n};\n\nexport default React.forwardRef<TextAreaRef, ITextAreaProps>((props, ref) => {\n  const { prefixCls, className, onChange, onMount, onScroll, tabSize, style, ...otherProps } = props || {};\n  const warp = React.createRef<HTMLDivElement>();\n  const preElm = React.createRef<HTMLPreElement>();\n  const textElm = React.createRef<HTMLTextAreaElement>();\n  useImperativeHandle<TextAreaRef, {}>(ref, () => ({ text: textElm.current, warp: warp.current }), [\n    warp.current,\n    textElm.current,\n  ]);\n  const [value, setValue] = useState(props.value);\n  const highlight = () => {\n    const pre = preElm.current;\n    const html = Prism.highlight(value as string, Prism.languages.markdown, 'markdown');\n    pre!.innerHTML = `${html}<br />`;\n  };\n  useEffect(() => {\n    onMount && onMount(true);\n    return () => {\n      onMount && onMount(false);\n    };\n  }, []);\n  useEffect(() => {\n    if (props.value !== value) {\n      setValue(props.value);\n    }\n  }, [props.value]);\n\n  useEffect(() => highlight(), [value]);\n  useEffect(() => {\n    if (props.autoFocus && textElm.current) {\n      textElm.current.focus();\n    }\n  }, [props.autoFocus]);\n  return (\n    <div ref={warp} className={classnames(`${prefixCls}-aree`, className)} onScroll={onScroll}>\n      <div className={classnames(`${prefixCls}-text`)}>\n        <pre ref={preElm} className={classnames(`${prefixCls}-text-pre`, 'wmde-markdown-color')} />\n        <textarea\n          {...otherProps}\n          ref={textElm}\n          onKeyDown={hotkeys.bind(this, { tabSize } as IHotkeyOptions)}\n          className={`${prefixCls}-text-input`}\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value);\n            onChange && onChange(e);\n          }}\n        />\n      </div>\n    </div>\n  );\n});\n"]}