{"ast":null,"code":"import e from \"querystring\";\nvar t = /https?|ftp|gopher|file/;\n\nfunction r(r) {\n  \"string\" == typeof r && (r = m(r));\n\n  var a = function (e, t, r) {\n    var a = e.auth,\n        o = e.hostname,\n        s = e.protocol || \"\",\n        h = e.pathname || \"\",\n        c = e.hash || \"\",\n        p = e.query || \"\",\n        n = !1;\n    a = a ? encodeURIComponent(a).replace(/%3A/i, \":\") + \"@\" : \"\", e.host ? n = a + e.host : o && (n = a + (~o.indexOf(\":\") ? \"[\" + o + \"]\" : o), e.port && (n += \":\" + e.port)), p && \"object\" == typeof p && (p = t.encode(p));\n    var l = e.search || p && \"?\" + p || \"\";\n    return s && \":\" !== s.substr(-1) && (s += \":\"), e.slashes || (!s || r.test(s)) && !1 !== n ? (n = \"//\" + (n || \"\"), h && \"/\" !== h[0] && (h = \"/\" + h)) : n || (n = \"\"), c && \"#\" !== c[0] && (c = \"#\" + c), l && \"?\" !== l[0] && (l = \"?\" + l), {\n      protocol: s,\n      host: n,\n      pathname: h = h.replace(/[?#]/g, encodeURIComponent),\n      search: l = l.replace(\"#\", \"%23\"),\n      hash: c\n    };\n  }(r, e, t);\n\n  return \"\" + a.protocol + a.host + a.pathname + a.search + a.hash;\n}\n\nvar a = \"http://\",\n    o = \"w.w\",\n    s = a + o,\n    h = /^https?|ftp|gopher|file/,\n    c = /^(.*?)([#?].*)/,\n    p = /^([a-z0-9.+-]*:)(\\/{0,3})(.*)/i,\n    n = /^([a-z0-9.+-]*:)?\\/\\/\\/*/i,\n    l = /^([a-z0-9.+-]*:)(\\/{0,2})\\[(.*)\\]$/i;\n\nfunction i(e) {\n  try {\n    return decodeURI(e);\n  } catch (t) {\n    return e;\n  }\n}\n\nfunction m(t, a, m) {\n  void 0 === a && (a = !1), void 0 === m && (m = !1);\n  var u = (t = t.trim()).match(c);\n  t = u ? i(u[1]).replace(/\\\\/g, \"/\") + u[2] : i(t).replace(/\\\\/g, \"/\"), l.test(t) && \"/\" !== t.slice(-1) && (t += \"/\");\n  var f = !/(^javascript)/.test(t) && t.match(p),\n      v = n.test(t),\n      g = \"\";\n  f && (h.test(f[1]) || (g = f[1].toLowerCase(), t = \"\" + f[2] + f[3]), f[2] || (v = !1, h.test(f[1]) ? (g = f[1], t = \"\" + f[3]) : t = \"//\" + f[3]), 3 !== f[2].length && 1 !== f[2].length || (g = f[1], t = \"/\" + f[3]));\n  var d,\n      b = t.match(/(:[0-9]+)/),\n      y = \"\";\n  b && b[1] && 3 === b[1].length && (t = t.replace(y = b[1], y + \"00\"));\n  var w = {},\n      R = \"\",\n      U = \"\";\n\n  try {\n    d = new URL(t);\n  } catch (e) {\n    R = e, g || m || !/^\\/\\//.test(t) || /^\\/\\/.+[@.]/.test(t) || (U = \"/\", t = t.substr(1));\n\n    try {\n      d = new URL(t, s);\n    } catch (e) {\n      return w.protocol = g, w.href = g, w;\n    }\n  }\n\n  w.slashes = v && !U, w.host = d.host === o ? \"\" : d.host, w.hostname = d.hostname === o ? \"\" : d.hostname.replace(/(\\[|\\])/g, \"\"), w.protocol = R ? g || null : d.protocol, w.search = d.search.replace(/\\\\/g, \"%5C\"), w.hash = d.hash.replace(/\\\\/g, \"%5C\");\n  var C = t.split(\"#\");\n  !w.search && ~C[0].indexOf(\"?\") && (w.search = \"?\"), w.hash || \"\" !== C[1] || (w.hash = \"#\"), w.query = a ? e.decode(d.search.substr(1)) : w.search.substr(1), w.pathname = U + i(d.pathname).replace(/\"/g, \"%22\"), \"about:\" === w.protocol && \"blank\" === w.pathname && (w.protocol = \"\", w.pathname = \"\"), R && \"/\" !== t[0] && (w.pathname = w.pathname.substr(1)), g && !h.test(g) && \"/\" !== t.slice(-1) && \"/\" === w.pathname && (w.pathname = \"\"), w.path = w.pathname + w.search, w.auth = [d.username, d.password].map(decodeURIComponent).filter(Boolean).join(\":\"), w.port = d.port, y && (w.host = w.host.replace(y + \"00\", y), w.port = w.port.slice(0, -2)), w.href = U ? \"\" + w.pathname + w.search + w.hash : r(w);\n  var j = /^(file)/.test(w.href) ? [\"host\", \"hostname\"] : [];\n  return Object.keys(w).forEach(function (e) {\n    ~j.indexOf(e) || (w[e] = w[e] || null);\n  }), w;\n}\n\nvar u = /^([a-z0-9.+-]*:\\/\\/\\/)([a-z0-9.+-]:\\/*)?/i,\n    f = /https?|ftp|gopher|file/;\n\nfunction v(e, t) {\n  var o = \"string\" == typeof e ? m(e) : e;\n  e = \"object\" == typeof e ? r(e) : e;\n  var h = m(t),\n      c = \"\";\n  o.protocol && !o.slashes && (c = o.protocol, e = e.replace(o.protocol, \"\"), c += \"/\" === t[0] || \"/\" === e[0] ? \"/\" : \"\"), c && h.protocol && (c = \"\", h.slashes || (c = h.protocol, t = t.replace(h.protocol, \"\")));\n  var p = e.match(u);\n  p && !h.protocol && (e = e.substr((c = p[1] + (p[2] || \"\")).length), /^\\/\\/[^\\/]/.test(t) && (c = c.slice(0, -1)));\n  var n = new URL(e, s + \"/\"),\n      l = new URL(t, n).toString().replace(s, \"\"),\n      i = h.protocol || o.protocol;\n  return i += o.slashes || h.slashes ? \"//\" : \"\", !c && i ? l = l.replace(a, i) : c && (l = l.replace(a, \"\")), f.test(l) || ~t.indexOf(\".\") || \"/\" === e.slice(-1) || \"/\" === t.slice(-1) || \"/\" !== l.slice(-1) || (l = l.slice(0, -1)), c && (l = c + (\"/\" === l[0] ? l.substr(1) : l)), l;\n}\n\nfunction g(e, t) {\n  return m(v(e, t));\n}\n\nexport { m as parse, r as format, v as resolve, g as resolveObject };","map":{"version":3,"sources":["../src/format.js","../third_party/format.js","../src/constants.js","../src/parse.js","../src/resolve.js"],"names":["const","slashedProtocols","urlObj","parse","format","qs","protocol","pathname","hash","query","host","auth","encodeURIComponent","replace","hostname","indexOf","port","encode","search","substr","slashes","test","PROTOCOL","HOST","BASE_URL","urlRegex","protocolRegex","slashesRegex","ipv6Regex","safeDecode","url","decodeURI","_","urlStr","parseQs","slashesDenoteHost","trim","slashesMatch","match","slice","protocolMatch","protocolPrefix","toLowerCase","length","portMatch","portSuffix","res","err","preSlash","URL","e","href","hashSplit","split","decode","path","username","password","map","decodeURIComponent","filter","Boolean","join","excludedKeys","Object","keys","forEach","k","resolveProtocolRegex","resolve","fromUrl","toUrl","parsedFrom","parsedTo","prefix","normalizedFromUrl","resolved","toString","actualProtocol","resolveObject"],"mappings":";AAoBAA,IAAMC,CAAAA,GAAmB,wBAAzBD;;AAEA,SAAA,CAAA,CAAwBE,CAAxB,EAAwBA;AACA,cAAA,OAAXA,CAAW,KACpBA,CAAAA,GAASC,CAAAA,CAAMD,CAANC,CADW;;AACLD,MAAAA,CAAAA,GCFJ,UAASA,CAAT,EAAiBG,CAAjB,EAAqBJ,CAArB,EAAqBA;AAAAA,QAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA;AAAAA,QAAAA,CAAAA,GAAAA,CAAAA,CAAAA,QAAAA;AAAAA,QAE9BK,CAAAA,GAAWJ,CAAAA,CAAOI,QAAPJ,IAAmB,EAFAD;AAAAA,QAG9BM,CAAAA,GAAWL,CAAAA,CAAOK,QAAPL,IAAmB,EAHAD;AAAAA,QAI9BO,CAAAA,GAAON,CAAAA,CAAOM,IAAPN,IAAe,EAJQD;AAAAA,QAK9BQ,CAAAA,GAAQP,CAAAA,CAAOO,KAAPP,IAAgB,EALMD;AAAAA,QAM9BS,CAAAA,GAAAA,CAAO,CANuBT;AAQlCU,IAAAA,CAAAA,GAAOA,CAAAA,GAAOC,kBAAAA,CAAmBD,CAAnBC,CAAAA,CAAyBC,OAAzBD,CAAiC,MAAjCA,EAAyC,GAAzCA,IAAgD,GAAvDD,GAA6D,EAApEA,EAEIT,CAAAA,CAAOQ,IAAPR,GACFQ,CAAAA,GAAOC,CAAAA,GAAOT,CAAAA,CAAOQ,IADnBR,GAEOY,CAAAA,KACTJ,CAAAA,GAAOC,CAAAA,IAAAA,CAASG,CAAAA,CAASC,OAATD,CAAiB,GAAjBA,CAATH,GAA0B,MAAWG,CAAX,GAAWA,GAArCH,GAAmDG,CAAnDH,CAAPD,EACIR,CAAAA,CAAOc,IAAPd,KACFQ,CAAAA,IAAQ,MAAMR,CAAAA,CAAOc,IADnBd,CAFKY,CAJXH,EAWIF,CAAAA,IAA0B,YAAA,OAAVA,CAAhBA,KAEFA,CAAAA,GAAQJ,CAAAA,CAAGY,MAAHZ,CAAUI,CAAVJ,CAFNI,CAXJE;AAaoBF,QAGhBS,CAAAA,GAAShB,CAAAA,CAAOgB,MAAPhB,IAAkBO,CAAAA,IAAAA,MAAaA,CAA/BP,IAA2C,EAHpCO;AAGoC,WAEpDH,CAAAA,IAAoC,QAAxBA,CAAAA,CAASa,MAATb,CAASa,CAAQ,CAAjBb,CAAZA,KAAyCA,CAAAA,IAAY,GAArDA,GAGFJ,CAAAA,CAAOkB,OAAPlB,IAAOkB,CAAAA,CACJd,CADIc,IACQnB,CAAAA,CAAiBoB,IAAjBpB,CAAsBK,CAAtBL,CADRmB,KAC8Bd,CAAuB,CAAvBA,KAAcI,CADnDR,IAGAQ,CAAAA,GAAO,QAAQA,CAAAA,IAAQ,EAAhB,CAAPA,EACIH,CAAAA,IAA4B,QAAhBA,CAAAA,CAAS,CAATA,CAAZA,KAAiCA,CAAAA,GAAW,MAAMA,CAAlDA,CAJJL,IAKUQ,CAAAA,KACVA,CAAAA,GAAO,EADGA,CARRJ,EAYAE,CAAAA,IAAoB,QAAZA,CAAAA,CAAK,CAALA,CAARA,KAAyBA,CAAAA,GAAO,MAAMA,CAAtCA,CAZAF,EAaAY,CAAAA,IAAwB,QAAdA,CAAAA,CAAO,CAAPA,CAAVA,KAA6BA,CAAAA,GAAS,MAAMA,CAA5CA,CAbAZ,EAkBG;AAAA,MAAA,QAAA,EACLA,CADK;AACLA,MAAAA,IAAAA,EACAI,CAFK;AAELA,MAAAA,QAAAA,EALFH,CAAAA,GAAWA,CAAAA,CAASM,OAATN,CAAiB,OAAjBA,EAA0BK,kBAA1BL,CAGJ;AAH8BK,MAAAA,MAAAA,EACrCM,CAAAA,GAASA,CAAAA,CAAOL,OAAPK,CAAe,GAAfA,EAAoB,KAApBA,CAEF;AAFsB,MAAA,IAAA,EAO3BV;AALK,KApBiD;ADnBLJ,GCLtC,CDMXF,CCNW,EDOXG,CCPW,EDQXJ,CCRW,CDEIC;;AAMfD,SAAAA,KAAAA,CAAAA,CAAAA,QAAAA,GAAAA,CAAAA,CAAAA,IAAAA,GAAAA,CAAAA,CAAAA,QAAAA,GAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,CAAAA,IAAAA;AEdGD;;AAAAA,IAAMsB,CAAAA,GAAW,SAAjBtB;AAAAA,IACMuB,CAAAA,GAAO,KADbvB;AAAAA,IAEMwB,CAAAA,GAAWF,CAAAA,GAAWC,CAF5BvB;AAAAA,ICIDC,CAAAA,GAAmB,yBDJlBD;AAAAA,ICKDyB,CAAAA,GAAW,gBDLVzB;AAAAA,ICMD0B,CAAAA,GAAgB,gCDNf1B;AAAAA,ICOD2B,CAAAA,GAAe,2BDPd3B;AAAAA,ICQD4B,CAAAA,GAAY,qCDRX5B;;ACUP,SAAS6B,CAAT,CAAoBC,CAApB,EAAoBA;AAAAA,MAAAA;AAAAA,WAETC,SAAAA,CAAUD,CAAVC,CAFSD;AAGhB,GAHgBA,CAGhB,OAAOE,CAAP,EAAOA;AAAAA,WACAF,CADAE;AACAF;AAII;;AAAA,SAAA,CAAA,CAASG,CAAT,EAAiBC,CAAjB,EAAkCC,CAAlC,EAAkCA;AAAAA,OAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAAP,CAAOA,GAAP,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,GAAA,CAA2B,CAA3B,CAAOA;AAAoB,MAG7DE,CAAAA,GAAAA,CAFNJ,CAAAA,GAASA,CAAAA,CAAOG,IAAPH,EAEHI,EAAsBC,KAAtBD,CAA4BZ,CAA5BY,CAH6D;AAKjEJ,EAAAA,CAAAA,GADEI,CAAAA,GACOR,CAAAA,CAAWQ,CAAAA,CAAa,CAAbA,CAAXR,CAAAA,CAA4BhB,OAA5BgB,CAAoC,KAApCA,EAA2C,GAA3CA,IAAkDQ,CAAAA,CAAa,CAAbA,CADzDA,GAGOR,CAAAA,CAAWI,CAAXJ,CAAAA,CAAmBhB,OAAnBgB,CAA2B,KAA3BA,EAAkC,GAAlCA,CAFTI,EAMEL,CAAAA,CAAUP,IAAVO,CAAeK,CAAfL,KAEuB,QAArBK,CAAAA,CAAOM,KAAPN,CAAOM,CAAO,CAAdN,CAFFL,KAE4BK,CAAAA,IAAU,GAFtCL,CANFK;AAQwC,MAGpCO,CAAAA,GAAAA,CACH,gBAAgBnB,IAAhB,CAAqBY,CAArB,CADGO,IAC6BP,CAAAA,CAAOK,KAAPL,CAAaP,CAAbO,CAJO;AAAA,MAKtCb,CAAAA,GAAUO,CAAAA,CAAaN,IAAbM,CAAkBM,CAAlBN,CAL4B;AAAA,MAMtCc,CAAAA,GAAiB,EANqB;AAQtCD,EAAAA,CAAAA,KACGvC,CAAAA,CAAiBoB,IAAjBpB,CAAsBuC,CAAAA,CAAc,CAAdA,CAAtBvC,MAEHwC,CAAAA,GAAiBD,CAAAA,CAAc,CAAdA,CAAAA,CAAiBE,WAAjBF,EAAjBC,EACAR,CAAAA,GAAU,KAAEO,CAAAA,CAAc,CAAdA,CAAF,GAAqBA,CAAAA,CAAc,CAAdA,CAH5BvC,GAMAuC,CAAAA,CAAc,CAAdA,CAAAA,KACHpB,CAAAA,GAAAA,CAAU,CAAVA,EACInB,CAAAA,CAAiBoB,IAAjBpB,CAAsBuC,CAAAA,CAAc,CAAdA,CAAtBvC,KACFwC,CAAAA,GAAiBD,CAAAA,CAAc,CAAdA,CAAjBC,EACAR,CAAAA,GAAU,KAAEO,CAAAA,CAAc,CAAdA,CAFVvC,IAIFgC,CAAAA,GAAU,OAAIO,CAAAA,CAAc,CAAdA,CANbA,CANAvC,EAkB2B,MAA5BuC,CAAAA,CAAc,CAAdA,CAAAA,CAAiBG,MAAW,IAAiC,MAA5BH,CAAAA,CAAc,CAAdA,CAAAA,CAAiBG,MAAtB,KAC9BF,CAAAA,GAAiBD,CAAAA,CAAc,CAAdA,CAAjBC,EACAR,CAAAA,GAAU,MAAGO,CAAAA,CAAc,CAAdA,CAFiB,CAnB9BA,CAAAA;AAqB2B,MAa3BV,CAb2B;AAAA,MAK3Bc,CAAAA,GAAYX,CAAAA,CAAOK,KAAPL,CAAa,WAAbA,CALe;AAAA,MAM3BY,CAAAA,GAAa,EANc;AAQ3BD,EAAAA,CAAAA,IAAaA,CAAAA,CAAU,CAAVA,CAAbA,IAAqD,MAAxBA,CAAAA,CAAU,CAAVA,CAAAA,CAAaD,MAA1CC,KAEFX,CAAAA,GAASA,CAAAA,CAAOpB,OAAPoB,CADTY,CAAAA,GAAaD,CAAAA,CAAU,CAAVA,CACJX,EAA8BY,CAAAA,GAAAA,IAA9BZ,CAFPW;AAEqCC,MAIrCC,CAAAA,GAAM,EAJ+BD;AAAAA,MAKrCE,CAAAA,GAAM,EAL+BF;AAAAA,MAMrCG,CAAAA,GAAW,EAN0BH;;AAM1B,MAAA;AAGbf,IAAAA,CAAAA,GAAM,IAAImB,GAAJ,CAAQhB,CAAR,CAANH;AACA,GAJa,CAIb,OAAOoB,CAAP,EAAOA;AACPH,IAAAA,CAAAA,GAAMG,CAANH,EAIGN,CAAAA,IACAN,CADAM,IACAN,CACD,QAAQd,IAAR,CAAaY,CAAb,CAFCQ,IAGA,cAAcpB,IAAd,CAAmBY,CAAnB,CAHAQ,KAKDO,CAAAA,GAAW,GAAXA,EACAf,CAAAA,GAASA,CAAAA,CAAOd,MAAPc,CAAc,CAAdA,CANRQ,CAJHM;;AAUyB,QAAA;AAIvBjB,MAAAA,CAAAA,GAAM,IAAImB,GAAJ,CAAQhB,CAAR,EAAgBT,CAAhB,CAANM;AACA,KALuB,CAKvB,OAAOE,CAAP,EAAOA;AAAAA,aAGPc,CAAAA,CAAIxC,QAAJwC,GAAeL,CAAfK,EACAA,CAAAA,CAAIK,IAAJL,GAAWL,CADXK,EAEOA,CALAd;AAKAc;AAIXA;;AAAAA,EAAAA,CAAAA,CAAI1B,OAAJ0B,GAAc1B,CAAAA,IAAAA,CAAY4B,CAA1BF,EACAA,CAAAA,CAAIpC,IAAJoC,GAAWhB,CAAAA,CAAIpB,IAAJoB,KAAaP,CAAbO,GAAoB,EAApBA,GAAyBA,CAAAA,CAAIpB,IADxCoC,EAEAA,CAAAA,CAAIhC,QAAJgC,GACEhB,CAAAA,CAAIhB,QAAJgB,KAAiBP,CAAjBO,GAAwB,EAAxBA,GAA6BA,CAAAA,CAAIhB,QAAJgB,CAAajB,OAAbiB,CAAqB,UAArBA,EAAiC,EAAjCA,CAH/BgB,EAIAA,CAAAA,CAAIxC,QAAJwC,GAAeC,CAAAA,GAAMN,CAAAA,IAAkB,IAAxBM,GAA+BjB,CAAAA,CAAIxB,QAJlDwC,EAMAA,CAAAA,CAAI5B,MAAJ4B,GAAahB,CAAAA,CAAIZ,MAAJY,CAAWjB,OAAXiB,CAAmB,KAAnBA,EAA0B,KAA1BA,CANbgB,EAOAA,CAAAA,CAAItC,IAAJsC,GAAWhB,CAAAA,CAAItB,IAAJsB,CAASjB,OAATiB,CAAiB,KAAjBA,EAAwB,KAAxBA,CAPXgB;AAOmC,MAE7BM,CAAAA,GAAYnB,CAAAA,CAAOoB,KAAPpB,CAAa,GAAbA,CAFiB;AAEJ,GAG1Ba,CAAAA,CAAI5B,MAHsB,IAGtBA,CAAWkC,CAAAA,CAAU,CAAVA,CAAAA,CAAarC,OAAbqC,CAAqB,GAArBA,CAHW,KAI7BN,CAAAA,CAAI5B,MAAJ4B,GAAa,GAJgB,GAO1BA,CAAAA,CAAItC,IAAJsC,IAA6B,OAAjBM,CAAAA,CAAU,CAAVA,CAAZN,KACHA,CAAAA,CAAItC,IAAJsC,GAAW,GADRA,CAP0B,EAa/BA,CAAAA,CAAIrC,KAAJqC,GAAYZ,CAAAA,GAAU7B,CAAAA,CAAGiD,MAAHjD,CAAUyB,CAAAA,CAAIZ,MAAJY,CAAWX,MAAXW,CAAkB,CAAlBA,CAAVzB,CAAV6B,GAA4CY,CAAAA,CAAI5B,MAAJ4B,CAAW3B,MAAX2B,CAAkB,CAAlBA,CAbzB,EAe/BA,CAAAA,CAAIvC,QAAJuC,GAAeE,CAAAA,GAAWnB,CAAAA,CAAWC,CAAAA,CAAIvB,QAAfsB,CAAAA,CAAyBhB,OAAzBgB,CAAiC,IAAjCA,EAAuC,KAAvCA,CAfK,EAkBV,aAAjBiB,CAAAA,CAAIxC,QAAa,IAA6B,YAAjBwC,CAAAA,CAAIvC,QAAhB,KACnBuC,CAAAA,CAAIxC,QAAJwC,GAAe,EAAfA,EACAA,CAAAA,CAAIvC,QAAJuC,GAAe,EAFI,CAlBU,EAyB3BC,CAAAA,IAAqB,QAAdd,CAAAA,CAAO,CAAPA,CAAPc,KAA0BD,CAAAA,CAAIvC,QAAJuC,GAAeA,CAAAA,CAAIvC,QAAJuC,CAAa3B,MAAb2B,CAAoB,CAApBA,CAAzCC,CAzB2B,EA6B7BN,CAAAA,IAAAA,CACCxC,CAAAA,CAAiBoB,IAAjBpB,CAAsBwC,CAAtBxC,CADDwC,IAEqB,QAArBR,CAAAA,CAAOM,KAAPN,CAAOM,CAAO,CAAdN,CAFAQ,IAGiB,QAAjBK,CAAAA,CAAIvC,QAHJkC,KAKAK,CAAAA,CAAIvC,QAAJuC,GAAe,EALfL,CA7B6B,EAqC/BK,CAAAA,CAAIS,IAAJT,GAAWA,CAAAA,CAAIvC,QAAJuC,GAAeA,CAAAA,CAAI5B,MArCC,EAuC/B4B,CAAAA,CAAInC,IAAJmC,GAAW,CAAChB,CAAAA,CAAI0B,QAAL,EAAe1B,CAAAA,CAAI2B,QAAnB,EACRC,GADQ,CACJC,kBADI,EAERC,MAFQ,CAEDC,OAFC,EAGRC,IAHQ,CAGH,GAHG,CAvCoB,EA2C/BhB,CAAAA,CAAI9B,IAAJ8B,GAAWhB,CAAAA,CAAId,IA3CgB,EA8C3B6B,CAAAA,KACFC,CAAAA,CAAIpC,IAAJoC,GAAWA,CAAAA,CAAIpC,IAAJoC,CAASjC,OAATiC,CAAoBD,CAAAA,GAAAA,IAApBC,EAAoCD,CAApCC,CAAXA,EACAA,CAAAA,CAAI9B,IAAJ8B,GAAWA,CAAAA,CAAI9B,IAAJ8B,CAASP,KAATO,CAAe,CAAfA,EAAe,CAAI,CAAnBA,CAFTD,CA9C2B,EAmD/BC,CAAAA,CAAIK,IAAJL,GAAWE,CAAAA,GAAAA,KAAcF,CAAAA,CAAa,QAA3BE,GAA6BF,CAAAA,CAAW,MAAxCE,GAA0CF,CAAAA,CAAS,IAAnDE,GAAuD5C,CAAAA,CAAO0C,CAAP1C,CAnDnC;AAmD0C0C,MAEnEiB,CAAAA,GAAe,UAAU1C,IAAV,CAAeyB,CAAAA,CAAIK,IAAnB,IAA2B,CAAC,MAAD,EAAS,UAAT,CAA3B,GAAkD,EAFEL;AAEF,SACvEkB,MAAAA,CAAOC,IAAPD,CAAYlB,CAAZkB,EAAiBE,OAAjBF,CAAiBE,UAAQC,CAARD,EAAQC;AAAAA,KACjBJ,CAAAA,CAAahD,OAAbgD,CAAqBI,CAArBJ,CADiBI,KACQrB,CAAAA,CAAIqB,CAAJrB,CAAAA,GAASA,CAAAA,CAAIqB,CAAJrB,CAAAA,IAAU,IAD3BqB;AAC2B,GADpDH,GAIOlB,CALgE;ACnKzE9C;;AAAAA,IAAMoE,CAAAA,GAAuB,2CAA7BpE;AAAAA,IACMC,CAAAA,GAAmB,wBADzBD;;AAGO,SAASqE,CAAT,CAAiBC,CAAjB,EAA0BC,CAA1B,EAA0BA;AAAAA,MAC3BC,CAAAA,GAAgC,YAAA,OAAZF,CAAY,GAAWnE,CAAAA,CAAMmE,CAANnE,CAAX,GAA4BmE,CADjCC;AAE/BD,EAAAA,CAAAA,GAA6B,YAAA,OAAZA,CAAY,GAAWlE,CAAAA,CAAOkE,CAAPlE,CAAX,GAA6BkE,CAA1DA;AAA0DA,MACtDG,CAAAA,GAAWtE,CAAAA,CAAMoE,CAANpE,CAD2CmE;AAAAA,MAEtDI,CAAAA,GAAS,EAF6CJ;AAKtDE,EAAAA,CAAAA,CAAWlE,QAAXkE,IAAWlE,CAAakE,CAAAA,CAAWpD,OAAnCoD,KACFE,CAAAA,GAASF,CAAAA,CAAWlE,QAApBoE,EAEAJ,CAAAA,GAAUA,CAAAA,CAAQzD,OAARyD,CAAgBE,CAAAA,CAAWlE,QAA3BgE,EAAqC,EAArCA,CAFVI,EAGAA,CAAAA,IAAuB,QAAbH,CAAAA,CAAM,CAANA,CAAa,IAAsB,QAAfD,CAAAA,CAAQ,CAARA,CAAP,GAA4B,GAA5B,GAAkC,EAJvDE,GAOAE,CAAAA,IAAUD,CAAAA,CAASnE,QAAnBoE,KACFA,CAAAA,GAAS,EAATA,EACKD,CAAAA,CAASrD,OAATqD,KACHC,CAAAA,GAASD,CAAAA,CAASnE,QAAlBoE,EACAH,CAAAA,GAAQA,CAAAA,CAAM1D,OAAN0D,CAAcE,CAAAA,CAASnE,QAAvBiE,EAAiC,EAAjCA,CAFLE,CAFHC,CAPAF;AAWyC,MAKvChC,CAAAA,GAAgB8B,CAAAA,CAAQhC,KAARgC,CAAcF,CAAdE,CALuB;AAMzC9B,EAAAA,CAAAA,IAAAA,CAAkBiC,CAAAA,CAASnE,QAA3BkC,KAGF8B,CAAAA,GAAUA,CAAAA,CAAQnD,MAARmD,CAAQnD,CADlBuD,CAAAA,GAASlC,CAAAA,CAAc,CAAdA,CAAAA,IAAoBA,CAAAA,CAAc,CAAdA,CAAAA,IAAoB,EAAxCA,CACSrB,EAAcwB,MAAtB2B,CAAVA,EAGI,aAAYjD,IAAZ,CAAiBkD,CAAjB,MAAyBG,CAAAA,GAASA,CAAAA,CAAOnC,KAAPmC,CAAa,CAAbA,EAAa,CAAI,CAAjBA,CAAlC,CANFlC;AAMqD,MAGnDmC,CAAAA,GAAoB,IAAI1B,GAAJ,CAAQqB,CAAR,EAAiB9C,CAAAA,GAAW,GAA5B,CAH+B;AAAA,MAIrDoD,CAAAA,GAAW,IAAI3B,GAAJ,CAAQsB,CAAR,EAAeI,CAAf,EACZE,QADY,GAEZhE,OAFY,CAEJW,CAFI,EAEM,EAFN,CAJ0C;AAAA,MASrDsD,CAAAA,GAAiBL,CAAAA,CAASnE,QAATmE,IAAqBD,CAAAA,CAAWlE,QATI;AASJA,SACrDwE,CAAAA,IAAkBN,CAAAA,CAAWpD,OAAXoD,IAAsBC,CAAAA,CAASrD,OAA/BoD,GAAyC,IAAzCA,GAAgD,EAAlEM,EAAkE,CAC7DJ,CAD6D,IACnDI,CADmD,GAEhEF,CAAAA,GAAWA,CAAAA,CAAS/D,OAAT+D,CAAiBtD,CAAjBsD,EAA2BE,CAA3BF,CAFqD,GAGvDF,CAAAA,KACTE,CAAAA,GAAWA,CAAAA,CAAS/D,OAAT+D,CAAiBtD,CAAjBsD,EAA2B,EAA3BA,CADFF,CAHXI,EASG7E,CAAAA,CAAiBoB,IAAjBpB,CAAsB2E,CAAtB3E,KAAsB2E,CACrBL,CAAAA,CAAMxD,OAANwD,CAAc,GAAdA,CADDtE,IAEqB,QAAtBqE,CAAAA,CAAQ/B,KAAR+B,CAAQ/B,CAAO,CAAf+B,CAFCrE,IAGmB,QAApBsE,CAAAA,CAAMhC,KAANgC,CAAMhC,CAAO,CAAbgC,CAHCtE,IAIsB,QAAvB2E,CAAAA,CAASrC,KAATqC,CAASrC,CAAO,CAAhBqC,CAJC3E,KAMD2E,CAAAA,GAAWA,CAAAA,CAASrC,KAATqC,CAAe,CAAfA,EAAe,CAAI,CAAnBA,CANV3E,CATH6E,EAmBIJ,CAAAA,KACFE,CAAAA,GAAWF,CAAAA,IAA0B,QAAhBE,CAAAA,CAAS,CAATA,CAAgB,GAAMA,CAAAA,CAASzD,MAATyD,CAAgB,CAAhBA,CAAN,GAA2BA,CAArDF,CADTA,CAnBJI,EAuBOF,CAxB8CtE;AA2BhD;;AAAA,SAASyE,CAAT,CAAuBT,CAAvB,EAAgCC,CAAhC,EAAgCA;AAAAA,SAC9BpE,CAAAA,CAAMkE,CAAAA,CAAQC,CAARD,EAAiBE,CAAjBF,CAANlE,CAD8BoE;AACPA;;AAAAA,SAAAA,CAAAA,IAAAA,KAAAA,EAAAA,CAAAA,IAAAA,MAAAA,EAAAA,CAAAA,IAAAA,OAAAA,EAAAA,CAAAA,IAAAA,aAAAA","sourcesContent":["/*\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport qs from 'querystring';\nimport parse from './parse';\nimport format from '../third_party/format';\n\nconst slashedProtocols = /https?|ftp|gopher|file/;\n\nexport default function(urlObj) {\n  if (typeof urlObj === 'string') {\n    urlObj = parse(urlObj);\n  }\n\n  const { protocol, host, pathname, search, hash } = format(\n    urlObj,\n    qs,\n    slashedProtocols\n  );\n\n  return `${protocol}${host}${pathname}${search}${hash}`;\n}\n","// Format function modified from nodejs\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport default function(urlObj, qs, slashedProtocols) {\n  let { auth, hostname } = urlObj;\n  let protocol = urlObj.protocol || '';\n  let pathname = urlObj.pathname || '';\n  let hash = urlObj.hash || '';\n  let query = urlObj.query || '';\n  let host = false;\n\n  auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@' : '';\n\n  if (urlObj.host) {\n    host = auth + urlObj.host;\n  } else if (hostname) {\n    host = auth + (~hostname.indexOf(':') ? `[${hostname}]` : hostname);\n    if (urlObj.port) {\n      host += ':' + urlObj.port;\n    }\n  }\n\n  if (query && typeof query === 'object') {\n    // query = '' + new URLSearchParams(query);\n    query = qs.encode(query);\n  }\n\n  let search = urlObj.search || (query && `?${query}`) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  if (\n    urlObj.slashes ||\n    ((!protocol || slashedProtocols.test(protocol)) && host !== false)\n  ) {\n    host = '//' + (host || '');\n    if (pathname && pathname[0] !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash[0] !== '#') hash = '#' + hash;\n  if (search && search[0] !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, encodeURIComponent);\n  search = search.replace('#', '%23');\n\n  return {\n    protocol,\n    host,\n    pathname,\n    search,\n    hash\n  };\n}\n","/*\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL = 'http://';\nexport const HOST = 'w.w';\nexport const BASE_URL = PROTOCOL + HOST;\n","/*\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport qs from 'querystring';\nimport format from './format';\nimport { BASE_URL, HOST } from './constants';\n\nconst slashedProtocols = /^https?|ftp|gopher|file/;\nconst urlRegex = /^(.*?)([#?].*)/;\nconst protocolRegex = /^([a-z0-9.+-]*:)(\\/{0,3})(.*)/i;\nconst slashesRegex = /^([a-z0-9.+-]*:)?\\/\\/\\/*/i;\nconst ipv6Regex = /^([a-z0-9.+-]*:)(\\/{0,2})\\[(.*)\\]$/i;\n\nfunction safeDecode(url) {\n  try {\n    return decodeURI(url);\n  } catch (_) {\n    return url;\n  }\n}\n\nexport default function(urlStr, parseQs = false, slashesDenoteHost = false) {\n  urlStr = urlStr.trim();\n\n  const slashesMatch = urlStr.match(urlRegex);\n  if (slashesMatch) {\n    urlStr = safeDecode(slashesMatch[1]).replace(/\\\\/g, '/') + slashesMatch[2];\n  } else {\n    urlStr = safeDecode(urlStr).replace(/\\\\/g, '/');\n  }\n\n  // IPv6 check\n  if (ipv6Regex.test(urlStr)) {\n    // Add trailing slash to IPV6 urls to match parsing\n    if (urlStr.slice(-1) !== '/') urlStr += '/';\n  }\n\n  const protocolMatch =\n    !/(^javascript)/.test(urlStr) && urlStr.match(protocolRegex);\n  let slashes = slashesRegex.test(urlStr);\n  let protocolPrefix = '';\n\n  if (protocolMatch) {\n    if (!slashedProtocols.test(protocolMatch[1])) {\n      // Replace invalid protocol with a valid one for correct parsing\n      protocolPrefix = protocolMatch[1].toLowerCase();\n      urlStr = `${protocolMatch[2]}${protocolMatch[3]}`;\n    }\n\n    if (!protocolMatch[2]) {\n      slashes = false;\n      if (slashedProtocols.test(protocolMatch[1])) {\n        protocolPrefix = protocolMatch[1];\n        urlStr = `${protocolMatch[3]}`;\n      } else {\n        urlStr = `//${protocolMatch[3]}`;\n      }\n    }\n\n    // Handle '///' in url Eg: http:///s//a/b/c\n    // TODO: file:/some/dir/# should become file:///some/dir/# according to the url module in node\n    if (protocolMatch[2].length === 3 || protocolMatch[2].length === 1) {\n      protocolPrefix = protocolMatch[1];\n      urlStr = `/${protocolMatch[3]}`;\n    }\n  }\n\n  // If port is 80 we change it to 8000 and undo it later\n  let portMatch = urlStr.match(/(:[0-9]+)/);\n  let portSuffix = '';\n\n  if (portMatch && portMatch[1] && portMatch[1].length === 3) {\n    portSuffix = portMatch[1];\n    urlStr = urlStr.replace(portSuffix, `${portSuffix}00`);\n  }\n\n  let url;\n  let res = {};\n  let err = '';\n  let preSlash = '';\n\n  try {\n    url = new URL(urlStr);\n  } catch (e) {\n    err = e;\n\n    // Handle url with slashes - Eg: //some_url\n    if (\n      !protocolPrefix &&\n      !slashesDenoteHost &&\n      /^\\/\\//.test(urlStr) &&\n      !/^\\/\\/.+[@.]/.test(urlStr)\n    ) {\n      preSlash = '/';\n      urlStr = urlStr.substr(1);\n    }\n\n    try {\n      url = new URL(urlStr, BASE_URL);\n    } catch (_) {\n      // Unable to parse the url\n      // If the URL has only the protocol - Eg: \"foo:\"\n      res.protocol = protocolPrefix;\n      res.href = protocolPrefix;\n      return res;\n    }\n  }\n\n  res.slashes = slashes && !preSlash;\n  res.host = url.host === HOST ? '' : url.host;\n  res.hostname =\n    url.hostname === HOST ? '' : url.hostname.replace(/(\\[|\\])/g, '');\n  res.protocol = err ? protocolPrefix || null : url.protocol;\n\n  res.search = url.search.replace(/\\\\/g, '%5C');\n  res.hash = url.hash.replace(/\\\\/g, '%5C');\n\n  const hashSplit = urlStr.split('#');\n  // Handle case when there is a lone '?' in url\n  // Eg: http://example.com/?\n  if (!res.search && ~hashSplit[0].indexOf('?')) {\n    res.search = '?';\n  }\n  // Similarly handle lone '#' Eg: http://example.com/#\n  if (!res.hash && hashSplit[1] === '') {\n    res.hash = '#';\n  }\n\n  // URLSearchParams is not supported in Edge 16\n  // res.query = res.searchParams;\n  res.query = parseQs ? qs.decode(url.search.substr(1)) : res.search.substr(1);\n\n  res.pathname = preSlash + safeDecode(url.pathname).replace(/\"/g, '%22');\n\n  // Chrome parses \"#abc\" as \"about:blank#abc\"\n  if (res.protocol === 'about:' && res.pathname === 'blank') {\n    res.protocol = '';\n    res.pathname = '';\n  }\n\n  // Partial url that does not start with a /\n  // example www.example.com\n  if (err && urlStr[0] !== '/') res.pathname = res.pathname.substr(1);\n\n  // Remove additional trailing slashes added by URL\n  if (\n    protocolPrefix &&\n    !slashedProtocols.test(protocolPrefix) &&\n    urlStr.slice(-1) !== '/' &&\n    res.pathname === '/'\n  ) {\n    res.pathname = '';\n  }\n\n  res.path = res.pathname + res.search;\n\n  res.auth = [url.username, url.password]\n    .map(decodeURIComponent)\n    .filter(Boolean)\n    .join(':');\n  res.port = url.port;\n\n  // Undo port to its original value, 8000 -> 80\n  if (portSuffix) {\n    res.host = res.host.replace(`${portSuffix}00`, portSuffix);\n    res.port = res.port.slice(0, -2);\n  }\n\n  res.href = preSlash ? `${res.pathname}${res.search}${res.hash}` : format(res);\n\n  const excludedKeys = /^(file)/.test(res.href) ? ['host', 'hostname'] : [];\n  Object.keys(res).forEach(k => {\n    if (!~excludedKeys.indexOf(k)) res[k] = res[k] || null;\n  });\n\n  return res;\n}\n","/*\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parse from './parse';\nimport format from './format';\nimport { BASE_URL, PROTOCOL, HOST } from './constants';\n\nconst resolveProtocolRegex = /^([a-z0-9.+-]*:\\/\\/\\/)([a-z0-9.+-]:\\/*)?/i;\nconst slashedProtocols = /https?|ftp|gopher|file/;\n\nexport function resolve(fromUrl, toUrl) {\n  let parsedFrom = typeof fromUrl === 'string' ? parse(fromUrl) : fromUrl;\n  fromUrl = typeof fromUrl === 'object' ? format(fromUrl) : fromUrl;\n  let parsedTo = parse(toUrl);\n  let prefix = '';\n\n  // Handle incomplete urls without slashes Eg: foo:a/b\n  if (parsedFrom.protocol && !parsedFrom.slashes) {\n    prefix = parsedFrom.protocol;\n\n    fromUrl = fromUrl.replace(parsedFrom.protocol, '');\n    prefix += toUrl[0] === '/' || fromUrl[0] === '/' ? '/' : '';\n  }\n\n  if (prefix && parsedTo.protocol) {\n    prefix = '';\n    if (!parsedTo.slashes) {\n      prefix = parsedTo.protocol;\n      toUrl = toUrl.replace(parsedTo.protocol, '');\n    }\n  }\n\n  // Handle http:///xyz urls\n  const protocolMatch = fromUrl.match(resolveProtocolRegex);\n  if (protocolMatch && !parsedTo.protocol) {\n    // protocolMatch[2] handles - file:///C:/DEV/Haskell/lib/HXmlToolbox-3.01/examples/\n    prefix = protocolMatch[1] + (protocolMatch[2] || '');\n    fromUrl = fromUrl.substr(prefix.length);\n\n    // :/// -> :// If toUrl is of the form //xyz\n    if (/^\\/\\/[^/]/.test(toUrl)) prefix = prefix.slice(0, -1);\n  }\n\n  const normalizedFromUrl = new URL(fromUrl, BASE_URL + '/');\n  let resolved = new URL(toUrl, normalizedFromUrl)\n    .toString()\n    .replace(BASE_URL, '');\n\n  // Remove/replace the protocol if the URL class has added it\n  let actualProtocol = parsedTo.protocol || parsedFrom.protocol;\n  actualProtocol += parsedFrom.slashes || parsedTo.slashes ? '//' : '';\n  if (!prefix && actualProtocol) {\n    resolved = resolved.replace(PROTOCOL, actualProtocol);\n  } else if (prefix) {\n    resolved = resolved.replace(PROTOCOL, '');\n  }\n\n  // Remove unwanted trailing slash\n  if (\n    !slashedProtocols.test(resolved) &&\n    !~toUrl.indexOf('.') &&\n    fromUrl.slice(-1) !== '/' &&\n    toUrl.slice(-1) !== '/' &&\n    resolved.slice(-1) === '/'\n  ) {\n    resolved = resolved.slice(0, -1);\n  }\n\n  // If prefix remove the leading slash\n  if (prefix) {\n    resolved = prefix + (resolved[0] === '/' ? resolved.substr(1) : resolved);\n  }\n\n  return resolved;\n}\n\nexport function resolveObject(fromUrl, toUrl) {\n  return parse(resolve(fromUrl, toUrl));\n}\n"]},"metadata":{},"sourceType":"module"}