{"ast":null,"code":"import _regeneratorRuntime from\"/Users/cpettyjohn/Habbo/instinct-revised/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/cpettyjohn/Habbo/instinct-revised/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{useContext,useEffect}from'react';import{sessionContext}from'../../context/session';import{sessionService}from'../../services/session';export function useRenewSessionSSO(){var _useContext=useContext(sessionContext),setSSO=_useContext.setSSO;useEffect(function(){function fetchSSO(){return _fetchSSO.apply(this,arguments);}function _fetchSSO(){_fetchSSO=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var sso;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return sessionService.createSSO();case 2:sso=_context.sent;setSSO(sso);case 4:case\"end\":return _context.stop();}}},_callee);}));return _fetchSSO.apply(this,arguments);}fetchSSO();},[]);}","map":{"version":3,"sources":["/Users/cpettyjohn/Habbo/instinct-revised/packages/frontend/frontend/src/hooks/session/renew-session-sso.ts"],"names":["useContext","useEffect","sessionContext","sessionService","useRenewSessionSSO","setSSO","fetchSSO","createSSO","sso"],"mappings":"2TAAA,OAAQA,UAAR,CAAoBC,SAApB,KAAoC,OAApC,CACA,OAAQC,cAAR,KAA6B,uBAA7B,CACA,OAAQC,cAAR,KAA6B,wBAA7B,CAEA,MAAO,SAASC,CAAAA,kBAAT,EAA8B,iBAClBJ,UAAU,CAACE,cAAD,CADQ,CAC5BG,MAD4B,aAC5BA,MAD4B,CAEnCJ,SAAS,CAAC,UAAM,SACCK,CAAAA,QADD,kIACd,iKACoBH,CAAAA,cAAc,CAACI,SAAf,EADpB,QACQC,GADR,eAEEH,MAAM,CAACG,GAAD,CAAN,CAFF,sDADc,2CAMdF,QAAQ,GACT,CAPQ,CAON,EAPM,CAAT,CAQD","sourcesContent":["import {useContext, useEffect} from 'react';\nimport {sessionContext} from '../../context/session';\nimport {sessionService} from '../../services/session';\n\nexport function useRenewSessionSSO() {\n  const {setSSO} = useContext(sessionContext);\n  useEffect(() => {\n    async function fetchSSO() {\n      const sso = await sessionService.createSSO();\n      setSSO(sso);\n    }\n\n    fetchSSO();\n  }, []);\n}\n"]},"metadata":{},"sourceType":"module"}