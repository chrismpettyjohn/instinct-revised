{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this;\n\nimport React, { useEffect, useImperativeHandle, useState } from 'react';\nimport classnames from 'classnames';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-markdown.js';\nimport hotkeys from './hotkeys';\nimport \"./index.css\";\nexport default /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _ref = props || {},\n      prefixCls = _ref.prefixCls,\n      className = _ref.className,\n      _onChange = _ref.onChange,\n      onMount = _ref.onMount,\n      onScroll = _ref.onScroll,\n      tabSize = _ref.tabSize,\n      style = _ref.style,\n      otherProps = _objectWithoutProperties(_ref, [\"prefixCls\", \"className\", \"onChange\", \"onMount\", \"onScroll\", \"tabSize\", \"style\"]);\n\n  var warp = /*#__PURE__*/React.createRef();\n  var preElm = /*#__PURE__*/React.createRef();\n  var textElm = /*#__PURE__*/React.createRef();\n  useImperativeHandle(ref, function () {\n    return {\n      text: textElm.current,\n      warp: warp.current\n    };\n  }, [warp.current, textElm.current]);\n\n  var _useState = useState(props.value),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var highlight = function highlight() {\n    var pre = preElm.current;\n    var html = Prism.highlight(value, Prism.languages.markdown, 'markdown');\n    pre.innerHTML = \"\".concat(html, \"<br />\");\n  };\n\n  useEffect(function () {\n    onMount && onMount(true);\n    return function () {\n      onMount && onMount(false);\n    };\n  }, []);\n  useEffect(function () {\n    if (props.value !== value) {\n      setValue(props.value);\n    }\n  }, [props.value]);\n  useEffect(function () {\n    return highlight();\n  }, [value]);\n  useEffect(function () {\n    if (props.autoFocus && textElm.current) {\n      textElm.current.focus();\n    }\n  }, [props.autoFocus]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: warp,\n    className: classnames(\"\".concat(prefixCls, \"-aree\"), className),\n    onScroll: onScroll\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classnames(\"\".concat(prefixCls, \"-text\"))\n  }, /*#__PURE__*/React.createElement(\"pre\", {\n    ref: preElm,\n    className: classnames(\"\".concat(prefixCls, \"-text-pre\"), 'wmde-markdown-color')\n  }), /*#__PURE__*/React.createElement(\"textarea\", _extends({}, otherProps, {\n    ref: textElm,\n    onKeyDown: hotkeys.bind(_this, {\n      tabSize: tabSize\n    }),\n    className: \"\".concat(prefixCls, \"-text-input\"),\n    value: value,\n    onChange: function onChange(e) {\n      setValue(e.target.value);\n      _onChange && _onChange(e);\n    }\n  }))));\n});","map":{"version":3,"sources":["../../../../src/components/TextArea/index.tsx"],"names":["prefixCls","className","onChange","onMount","onScroll","tabSize","style","otherProps","props","warp","React","preElm","textElm","useImperativeHandle","text","current","value","setValue","useState","highlight","pre","html","Prism","useEffect","classnames","e"],"mappings":"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","sourcesContent":["import React, { useEffect, useImperativeHandle, useMemo, useState } from 'react';\nimport classnames from 'classnames';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-markdown.js';\nimport { IProps } from '../../utils';\nimport hotkeys, { IHotkeyOptions } from './hotkeys';\nimport './index.less';\n\nexport interface ITextAreaProps\n  extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'value' | 'onChange' | 'onScroll'>,\n    IProps {\n  onChange?: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onMount?: (isMount: boolean) => void;\n  onScroll?: (e: React.UIEvent<HTMLDivElement>) => void;\n  value?: string;\n  tabSize?: number;\n}\n\nexport type TextAreaRef = {\n  text?: HTMLTextAreaElement;\n  warp?: HTMLDivElement;\n};\n\nexport default React.forwardRef<TextAreaRef, ITextAreaProps>((props, ref) => {\n  const { prefixCls, className, onChange, onMount, onScroll, tabSize, style, ...otherProps } = props || {};\n  const warp = React.createRef<HTMLDivElement>();\n  const preElm = React.createRef<HTMLPreElement>();\n  const textElm = React.createRef<HTMLTextAreaElement>();\n  useImperativeHandle<TextAreaRef, {}>(ref, () => ({ text: textElm.current, warp: warp.current }), [\n    warp.current,\n    textElm.current,\n  ]);\n  const [value, setValue] = useState(props.value);\n  const highlight = () => {\n    const pre = preElm.current;\n    const html = Prism.highlight(value as string, Prism.languages.markdown, 'markdown');\n    pre!.innerHTML = `${html}<br />`;\n  };\n  useEffect(() => {\n    onMount && onMount(true);\n    return () => {\n      onMount && onMount(false);\n    };\n  }, []);\n  useEffect(() => {\n    if (props.value !== value) {\n      setValue(props.value);\n    }\n  }, [props.value]);\n\n  useEffect(() => highlight(), [value]);\n  useEffect(() => {\n    if (props.autoFocus && textElm.current) {\n      textElm.current.focus();\n    }\n  }, [props.autoFocus]);\n  return (\n    <div ref={warp} className={classnames(`${prefixCls}-aree`, className)} onScroll={onScroll}>\n      <div className={classnames(`${prefixCls}-text`)}>\n        <pre ref={preElm} className={classnames(`${prefixCls}-text-pre`, 'wmde-markdown-color')} />\n        <textarea\n          {...otherProps}\n          ref={textElm}\n          onKeyDown={hotkeys.bind(this, { tabSize } as IHotkeyOptions)}\n          className={`${prefixCls}-text-input`}\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value);\n            onChange && onChange(e);\n          }}\n        />\n      </div>\n    </div>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}