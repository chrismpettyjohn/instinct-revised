{"ast":null,"code":"import { backendAPI, setAPIToken } from '../../api';\nimport { localStorageService } from '../../services/local-storage';\n\nclass SessionServiceImplementation {\n  constructor() {\n    this.localStorageKey = 'session';\n\n    this.logout = () => {\n      localStorageService.delete(this.localStorageKey);\n    };\n  }\n\n  async init() {\n    try {\n      const authToken = localStorageService.get(this.localStorageKey);\n      return await this.attemptBearerToken(authToken);\n    } catch {\n      return undefined;\n    }\n  }\n\n  async attemptCredentials(username, password) {\n    const bearerToken = await backendAPI.post('session', {\n      username,\n      password\n    });\n    return bearerToken.data;\n  }\n\n  async attemptBearerToken(bearerToken) {\n    try {\n      this.setBearerToken(bearerToken);\n      const session = await backendAPI.get('session');\n      return session.data;\n    } catch {\n      setAPIToken();\n      throw new Error('Invalid bearer token');\n    }\n  }\n\n  setBearerToken(bearerToken) {\n    setAPIToken(bearerToken);\n    return bearerToken !== undefined ? localStorageService.set(this.localStorageKey, bearerToken) : localStorageService.delete(this.localStorageKey);\n  }\n\n  async createSSO() {\n    const sso = await backendAPI.post('session/sso');\n    return sso.data;\n  }\n\n  async getCurrentUser() {\n    try {\n      const user = await backendAPI.get('session');\n      return user.data;\n    } catch {\n      throw new Error('Not Authenticated');\n    }\n  }\n\n  async updateProfile(favoriteYoutubeVideo) {\n    await backendAPI.post('session/settings/preferences', {\n      favoriteYoutubeVideo\n    });\n  }\n\n  async updateEmail(currentPassword, newEmail) {\n    await backendAPI.post('session/settings/email', {\n      password: currentPassword,\n      email: newEmail\n    });\n  }\n\n  async updatePassword(currentPassword, newPassword, newPasswordAgain) {\n    await backendAPI.post('session/settings/password', {\n      oldPassword: currentPassword,\n      newPassword,\n      newPasswordAgain\n    });\n  }\n\n  async generateForgotPasswordToken(email) {\n    await backendAPI.post(`session/forgot-password?email=${email}`);\n  }\n\n  async redeemForgotPasswordToken(token, newPassword, newPasswordAgain) {\n    await backendAPI.post('session/forgot-password/redeem', {\n      token,\n      password: newPassword,\n      passwordAgain: newPasswordAgain\n    });\n  }\n\n}\n\nexport const sessionService = new SessionServiceImplementation();","map":null,"metadata":{},"sourceType":"module"}