{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport classnames from 'classnames';\nimport Child from './Child';\nimport \"./index.css\";\nexport default function Toolbar() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var prefixCls = props.prefixCls,\n      _props$commands = props.commands,\n      commands = _props$commands === void 0 ? [] : _props$commands,\n      _props$commandHelp = props.commandHelp,\n      commandHelp = _props$commandHelp === void 0 ? {} : _props$commandHelp,\n      active = props.active,\n      groupName = props.groupName;\n\n  function handleClick(command, name) {\n    var onCommand = props.onCommand;\n    onCommand && onCommand(command, groupName || name);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-toolbar\")\n  }, /*#__PURE__*/React.createElement(\"ul\", null, commands.map(function (item, idx) {\n    if (item.keyCommand === 'divider') {\n      return /*#__PURE__*/React.createElement(\"li\", _extends({\n        key: idx\n      }, item.liProps, {\n        className: \"\".concat(prefixCls, \"-toolbar-divider\")\n      }));\n    }\n\n    if (!item.keyCommand) return;\n    var activeBtn = active && (item.value ? active[item.keyCommand] && active[item.keyCommand] === item.value : active[item.keyCommand]);\n    var childNode = typeof item.children === 'function' ? item.children(_objectSpread({\n      close: function close() {\n        return handleClick({}, item.groupName);\n      },\n      execute: function execute() {\n        return handleClick({\n          execute: item.execute\n        });\n      }\n    }, commandHelp)) : undefined;\n    return /*#__PURE__*/React.createElement(\"li\", _extends({\n      key: idx\n    }, item.liProps, {\n      className: classnames({\n        active: activeBtn\n      })\n    }), !item.buttonProps && item.icon, item.buttonProps && /*#__PURE__*/React.createElement('button', _objectSpread(_objectSpread({\n      type: 'button',\n      disabled: active && active.preview && active.preview === 'preview' && !/(preview|fullscreen)/.test(item.keyCommand),\n      'data-name': item.name\n    }, item.buttonProps), {}, {\n      onClick: function onClick(evn) {\n        evn.stopPropagation();\n        handleClick(item, item.groupName);\n      }\n    }), item.icon), item.children && /*#__PURE__*/React.createElement(Child, {\n      active: active,\n      groupName: item.groupName,\n      prefixCls: prefixCls,\n      onCommand: props.onCommand,\n      children: childNode,\n      commands: Array.isArray(item.children) && typeof item.children !== 'function' ? item.children : undefined\n    }));\n  })));\n}","map":{"version":3,"sources":["../../../../src/components/Toolbar/index.tsx"],"names":["props","prefixCls","commands","commandHelp","active","groupName","onCommand","item","idx","activeBtn","childNode","close","handleClick","execute","classnames","type","disabled","name","onClick","evn","Array","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport { IProps } from '../../utils';\nimport { ICommand, ICommandChildHandleParam } from '../../commands';\nimport Child from './Child';\nimport './index.less';\n\nexport interface IToolbarProps extends IProps {\n  onCommand?: (command: ICommand<string>, groupName?: string) => void;\n  commands?: ICommand<string>[];\n  groupName?: string;\n  commandHelp?: ICommandChildHandleParam;\n  active?: {\n    [key: string]: any;\n  };\n}\n\nexport default function Toolbar(props: IToolbarProps = {}) {\n  const { prefixCls, commands = [], commandHelp = {}, active, groupName } = props;\n  function handleClick(command: ICommand<string>, name?: string) {\n    const { onCommand } = props;\n    onCommand && onCommand(command, groupName || name);\n  }\n  return (\n    <div className={`${prefixCls}-toolbar`}>\n      <ul>\n        {commands.map((item, idx) => {\n          if (item.keyCommand === 'divider') {\n            return <li key={idx} {...item.liProps} className={`${prefixCls}-toolbar-divider`} />;\n          }\n          if (!item.keyCommand) return;\n          const activeBtn =\n            active &&\n            (item.value ? active[item.keyCommand] && active[item.keyCommand] === item.value : active[item.keyCommand]);\n\n          const childNode =\n            typeof item.children === 'function'\n              ? item.children({\n                  close: () => handleClick({}, item.groupName),\n                  execute: () => handleClick({ execute: item.execute }),\n                  ...commandHelp,\n                })\n              : undefined;\n          return (\n            <li key={idx} {...item.liProps} className={classnames({ active: activeBtn })}>\n              {!item.buttonProps && item.icon}\n              {item.buttonProps &&\n                React.createElement(\n                  'button',\n                  {\n                    type: 'button',\n                    disabled:\n                      active &&\n                      active.preview &&\n                      active.preview === 'preview' &&\n                      !/(preview|fullscreen)/.test(item.keyCommand),\n                    'data-name': item.name,\n                    ...item.buttonProps,\n                    onClick: (evn: any) => {\n                      evn.stopPropagation();\n                      handleClick(item, item.groupName);\n                    },\n                  },\n                  item.icon,\n                )}\n              {item.children && (\n                <Child\n                  active={active}\n                  groupName={item.groupName}\n                  prefixCls={prefixCls}\n                  onCommand={props.onCommand}\n                  children={childNode}\n                  commands={\n                    Array.isArray(item.children) && typeof item.children !== 'function' ? item.children : undefined\n                  }\n                />\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}