{"ast":null,"code":"/**\n * Parse a query string into an object.\n * @param {string} [querystring] The query string.\n * @returns {Record<string, string>} The parsed query object.\n */\nfunction parseQuery(querystring) {\n  let query = '';\n\n  if (typeof querystring === 'string') {\n    query = querystring;\n  }\n  /**\n   * Transform query strings such as `?foo1=bar1&foo2=bar2`:\n   * - remove `?` from the start\n   * - split with `&`\n   * - split pairs with `=`\n   * The resulting format will be { foo1: 'bar1', foo2: 'bar2' }\n   */\n\n\n  return query.replace(/^\\?/, '').split('&').reduce(function (acc, entry) {\n    const pair = entry.split('='); // Add all non-empty entries to the accumulated object\n\n    if (pair[0]) {\n      acc[pair[0]] = pair[1];\n    }\n\n    return acc;\n  }, {});\n}\n\nmodule.exports = parseQuery;","map":{"version":3,"sources":["/Users/cpettyjohn/Habbo/instinct/node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/utils/parseQuery.js"],"names":["parseQuery","querystring","query","replace","split","reduce","acc","entry","pair","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,CAAoBC,WAApB,EAAiC;AAC/B,MAAIC,KAAK,GAAG,EAAZ;;AACA,MAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC;AACnCC,IAAAA,KAAK,GAAGD,WAAR;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,SAAOC,KAAK,CACTC,OADI,CACI,KADJ,EACW,EADX,EAEJC,KAFI,CAEE,GAFF,EAGJC,MAHI,CAGG,UAAUC,GAAV,EAAeC,KAAf,EAAsB;AAC5B,UAAMC,IAAI,GAAGD,KAAK,CAACH,KAAN,CAAY,GAAZ,CAAb,CAD4B,CAE5B;;AACA,QAAII,IAAI,CAAC,CAAD,CAAR,EAAa;AACXF,MAAAA,GAAG,CAACE,IAAI,CAAC,CAAD,CAAL,CAAH,GAAeA,IAAI,CAAC,CAAD,CAAnB;AACD;;AAED,WAAOF,GAAP;AACD,GAXI,EAWF,EAXE,CAAP;AAYD;;AAEDG,MAAM,CAACC,OAAP,GAAiBV,UAAjB","sourcesContent":["/**\n * Parse a query string into an object.\n * @param {string} [querystring] The query string.\n * @returns {Record<string, string>} The parsed query object.\n */\nfunction parseQuery(querystring) {\n  let query = '';\n  if (typeof querystring === 'string') {\n    query = querystring;\n  }\n\n  /**\n   * Transform query strings such as `?foo1=bar1&foo2=bar2`:\n   * - remove `?` from the start\n   * - split with `&`\n   * - split pairs with `=`\n   * The resulting format will be { foo1: 'bar1', foo2: 'bar2' }\n   */\n  return query\n    .replace(/^\\?/, '')\n    .split('&')\n    .reduce(function (acc, entry) {\n      const pair = entry.split('=');\n      // Add all non-empty entries to the accumulated object\n      if (pair[0]) {\n        acc[pair[0]] = pair[1];\n      }\n\n      return acc;\n    }, {});\n}\n\nmodule.exports = parseQuery;\n"]},"metadata":{},"sourceType":"script"}