{"ast":null,"code":"import _classCallCheck from\"/Users/cpettyjohn/Habbo/instinct-revised/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/cpettyjohn/Habbo/instinct-revised/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";var LocalStorageService=/*#__PURE__*/function(){function LocalStorageService(){_classCallCheck(this,LocalStorageService);}_createClass(LocalStorageService,[{key:\"get\",value:// Fetches value from localStorage\n// Throws exception upon undefined\nfunction get(index){var value=localStorage.getItem(index);if(value===null){throw new Error('Item not found');}return value;}// Sets a index.ts with its value in localStorage\n},{key:\"set\",value:function set(index,value){localStorage.setItem(index,value);}// Removes a value from localStorage by its index.ts if it exists\n},{key:\"delete\",value:function _delete(index){localStorage.removeItem(index);}}]);return LocalStorageService;}();export var localStorageService=new LocalStorageService();","map":{"version":3,"sources":["/Users/cpettyjohn/Habbo/instinct-revised/packages/frontend/frontend/src/services/local-storage/LocalStorage.ts"],"names":["LocalStorageService","index","value","localStorage","getItem","Error","setItem","removeItem","localStorageService"],"mappings":"+TAEMA,CAAAA,mB,sJACJ;AACA;AACA,aAAIC,KAAJ,CAA2B,CACzB,GAAMC,CAAAA,KAAoB,CAAGC,YAAY,CAACC,OAAb,CAAqBH,KAArB,CAA7B,CAEA,GAAIC,KAAK,GAAK,IAAd,CAAoB,CAClB,KAAM,IAAIG,CAAAA,KAAJ,CAAU,gBAAV,CAAN,CACD,CAED,MAAOH,CAAAA,KAAP,CACD,CAED;mBACA,aAAID,KAAJ,CAAmBC,KAAnB,CAAwC,CACtCC,YAAY,CAACG,OAAb,CAAqBL,KAArB,CAA4BC,KAA5B,EACD,CAED;sBACA,iBAAOD,KAAP,CAA4B,CAC1BE,YAAY,CAACI,UAAb,CAAwBN,KAAxB,EACD,C,mCAGH,MAAO,IAAMO,CAAAA,mBAAsC,CAAG,GAAIR,CAAAA,mBAAJ,EAA/C","sourcesContent":["import {LocalStorageTypes} from './';\n\nclass LocalStorageService implements LocalStorageTypes {\n  // Fetches value from localStorage\n  // Throws exception upon undefined\n  get(index: string): string {\n    const value: string | null = localStorage.getItem(index);\n\n    if (value === null) {\n      throw new Error('Item not found');\n    }\n\n    return value;\n  }\n\n  // Sets a index.ts with its value in localStorage\n  set(index: string, value: string): void {\n    localStorage.setItem(index, value);\n  }\n\n  // Removes a value from localStorage by its index.ts if it exists\n  delete(index: string): void {\n    localStorage.removeItem(index);\n  }\n}\n\nexport const localStorageService: LocalStorageTypes = new LocalStorageService();\n"]},"metadata":{},"sourceType":"module"}