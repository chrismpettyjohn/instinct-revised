{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { Fragment, useMemo, useRef, useState } from 'react';\nimport classnames from 'classnames';\nimport MarkdownPreview from '@uiw/react-markdown-preview';\nimport TextArea from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, TextAreaCommandOrchestrator } from './commands';\nimport \"./index.css\";\n\nfunction setGroupPopFalse(data) {\n  Object.keys(data).forEach(function (keyname) {\n    data[keyname] = false;\n  });\n  return data;\n}\n\nvar InternalMDEditor = function InternalMDEditor(props, ref) {\n  var _classnames;\n\n  var _ref = props || {},\n      _ref$prefixCls = _ref.prefixCls,\n      prefixCls = _ref$prefixCls === void 0 ? 'w-md-editor' : _ref$prefixCls,\n      className = _ref.className,\n      propsValue = _ref.value,\n      _ref$commands = _ref.commands,\n      commands = _ref$commands === void 0 ? getCommands() : _ref$commands,\n      _ref$height = _ref.height,\n      heightWarp = _ref$height === void 0 ? 200 : _ref$height,\n      _ref$visiableDragbar = _ref.visiableDragbar,\n      visiableDragbar = _ref$visiableDragbar === void 0 ? true : _ref$visiableDragbar,\n      _ref$preview = _ref.preview,\n      previewType = _ref$preview === void 0 ? 'live' : _ref$preview,\n      isfullscreen = _ref.fullscreen,\n      previewOptions = _ref.previewOptions,\n      textareaProps = _ref.textareaProps,\n      _ref$maxHeight = _ref.maxHeight,\n      maxHeight = _ref$maxHeight === void 0 ? 1200 : _ref$maxHeight,\n      _ref$minHeight = _ref.minHeight,\n      minHeight = _ref$minHeight === void 0 ? 100 : _ref$minHeight,\n      autoFocus = _ref.autoFocus,\n      _ref$tabSize = _ref.tabSize,\n      tabSize = _ref$tabSize === void 0 ? 2 : _ref$tabSize,\n      onChange = _ref.onChange,\n      hideToolbar = _ref.hideToolbar,\n      other = _objectWithoutProperties(_ref, [\"prefixCls\", \"className\", \"value\", \"commands\", \"height\", \"visiableDragbar\", \"preview\", \"fullscreen\", \"previewOptions\", \"textareaProps\", \"maxHeight\", \"minHeight\", \"autoFocus\", \"tabSize\", \"onChange\", \"hideToolbar\"]);\n\n  var _useState = useState(propsValue || ''),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState(previewType),\n      _useState4 = _slicedToArray(_useState3, 2),\n      preview = _useState4[0],\n      setPreview = _useState4[1];\n\n  var _useState5 = useState(isfullscreen || false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isFullscreen = _useState6[0],\n      setIsFullscreen = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      groupPop = _useState8[0],\n      setGroupPop = _useState8[1];\n\n  var leftScroll = useRef(false);\n  var previewRef = /*#__PURE__*/React.createRef();\n\n  var _useState9 = useState(heightWarp),\n      _useState10 = _slicedToArray(_useState9, 2),\n      height = _useState10[0],\n      setHeight = _useState10[1];\n\n  var textarea = /*#__PURE__*/React.createRef();\n  var commandOrchestrator = useRef();\n  var selectionRange = useRef({\n    count: 0,\n    scrollTop: 0\n  });\n  var cls = classnames(className, prefixCls, (_classnames = {}, _defineProperty(_classnames, \"\".concat(prefixCls, \"-show-\").concat(preview), preview), _defineProperty(_classnames, \"\".concat(prefixCls, \"-fullscreen\"), isFullscreen), _classnames));\n\n  var commandOrchestratorHandle = function commandOrchestratorHandle() {\n    if (textarea.current && textarea.current.text) {\n      commandOrchestrator.current = new TextAreaCommandOrchestrator(textarea.current.text || null);\n    }\n\n    return commandOrchestrator.current;\n  };\n\n  useMemo(function () {\n    return preview !== props.preview && props.preview && setPreview(props.preview);\n  }, [props.preview]);\n  useMemo(function () {\n    return value !== props.value && setValue(props.value);\n  }, [props.value]);\n  useMemo(function () {\n    return height !== props.height && setHeight(heightWarp);\n  }, [heightWarp]);\n\n  function handleTextAreaMount(isMount) {\n    if (textarea.current && textarea.current.text && textarea.current.warp && isMount) {\n      textarea.current.text.blur();\n      textarea.current.text.focus();\n      textarea.current.text.selectionStart = selectionRange.current.count;\n      textarea.current.text.selectionEnd = selectionRange.current.count;\n      textarea.current.warp.scrollTo(0, selectionRange.current.scrollTop);\n    }\n  }\n\n  function modifySelectionRange() {\n    if (textarea.current && textarea.current.text && textarea.current.warp) {\n      selectionRange.current.count = textarea.current.text.selectionStart;\n      selectionRange.current.scrollTop = textarea.current.warp.scrollTop;\n    }\n  }\n\n  function handleChange(event) {\n    modifySelectionRange();\n    setValue(event.target.value);\n    onChange && onChange(event.target.value || '');\n  }\n\n  function handleCommand(command, groupName) {\n    commandOrchestratorHandle();\n    modifySelectionRange();\n\n    if (command.keyCommand === 'preview') {\n      setPreview(command.value);\n    }\n\n    if (command.keyCommand === 'fullscreen') {\n      setIsFullscreen(!isFullscreen);\n      document.body.style.overflow = isFullscreen ? 'initial' : 'hidden';\n    }\n\n    if (command.keyCommand === 'group') {\n      setGroupPop(_objectSpread(_objectSpread({}, setGroupPopFalse(groupPop)), {}, _defineProperty({}, \"\".concat(groupName), true)));\n    }\n\n    if (groupName && command.keyCommand !== 'group') {\n      setGroupPop(_objectSpread(_objectSpread({}, groupPop), {}, _defineProperty({}, \"\".concat(groupName), false)));\n    }\n\n    commandOrchestrator.current && commandOrchestrator.current.executeCommand(command);\n  }\n\n  function handleScroll(e) {\n    if (!textarea.current || !previewRef.current || !previewRef.current.mdp.current || !textarea.current.warp) {\n      return;\n    }\n\n    var previewDom = previewRef.current.mdp.current;\n    var textareaDom = textarea.current.warp;\n\n    if (textareaDom && previewDom) {\n      var scale = (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);\n\n      if (e.target === textareaDom && leftScroll.current) {\n        previewDom.scrollTop = textareaDom.scrollTop / scale;\n      }\n\n      if (e.target === previewDom && !leftScroll.current) {\n        textareaDom.scrollTop = previewDom.scrollTop * scale;\n      }\n    }\n  }\n\n  var chestratorObj = useMemo(function () {\n    return commandOrchestratorHandle();\n  }, [textarea.current, commandOrchestrator.current]);\n\n  var mdProps = _objectSpread(_objectSpread({}, previewOptions), {}, {\n    ref: previewRef,\n    onScroll: handleScroll,\n    source: value\n  });\n\n  return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: cls,\n    onClick: function onClick() {\n      return setGroupPop(_objectSpread({}, setGroupPopFalse(groupPop)));\n    },\n    style: {\n      height: isFullscreen ? '100%' : hideToolbar ? Number(height) - 29 : height\n    }\n  }, other), !hideToolbar && /*#__PURE__*/React.createElement(Toolbar, {\n    active: _objectSpread({\n      fullscreen: isFullscreen,\n      preview: preview\n    }, groupPop),\n    prefixCls: prefixCls,\n    commands: commands,\n    commandHelp: _objectSpread({\n      getState: commandOrchestrator.current && commandOrchestrator.current.getState,\n      textApi: commandOrchestrator.current && commandOrchestrator.current.textApi\n    }, chestratorObj),\n    onCommand: handleCommand\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-content\"),\n    style: {\n      height: isFullscreen ? 'calc(100% - 29px)' : Number(height) - 29\n    }\n  }, /(edit|live)/.test(preview) && /*#__PURE__*/React.createElement(TextArea, _extends({\n    ref: textarea,\n    tabSize: tabSize,\n    className: \"\".concat(prefixCls, \"-input\"),\n    prefixCls: prefixCls,\n    value: value,\n    autoFocus: autoFocus\n  }, textareaProps, {\n    onScroll: handleScroll,\n    onMouseOver: function onMouseOver() {\n      return leftScroll.current = true;\n    },\n    onMouseLeave: function onMouseLeave() {\n      return leftScroll.current = false;\n    },\n    onMount: handleTextAreaMount,\n    onChange: handleChange\n  })), /(live|preview)/.test(preview) && /*#__PURE__*/React.createElement(MarkdownPreview, _extends({}, mdProps, {\n    className: \"\".concat(prefixCls, \"-preview\")\n  }))), visiableDragbar && !isFullscreen && /*#__PURE__*/React.createElement(DragBar, {\n    prefixCls: prefixCls,\n    height: height,\n    maxHeight: maxHeight,\n    minHeight: minHeight,\n    onChange: function onChange(newHeight) {\n      setHeight(newHeight);\n    }\n  })));\n};\n\nvar MDEditor = /*#__PURE__*/React.forwardRef(InternalMDEditor);\nMDEditor.Markdown = MarkdownPreview;\nexport default MDEditor;","map":{"version":3,"sources":["../../src/Editor.tsx"],"names":["Object","data","InternalMDEditor","prefixCls","className","propsValue","commands","getCommands","heightWarp","visiableDragbar","previewType","isfullscreen","previewOptions","textareaProps","maxHeight","minHeight","autoFocus","tabSize","onChange","hideToolbar","other","props","value","setValue","useState","preview","setPreview","isFullscreen","setIsFullscreen","groupPop","setGroupPop","leftScroll","useRef","previewRef","React","height","setHeight","textarea","commandOrchestrator","selectionRange","count","scrollTop","cls","classnames","commandOrchestratorHandle","useMemo","modifySelectionRange","event","command","document","setGroupPopFalse","groupName","previewDom","textareaDom","scale","e","chestratorObj","mdProps","ref","onScroll","source","Number","fullscreen","getState","textApi","handleCommand","handleChange","MDEditor"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useMemo, useRef, useState } from 'react';\nimport classnames from 'classnames';\nimport MarkdownPreview, { MarkdownPreviewProps, MarkdownPreviewRef } from '@uiw/react-markdown-preview';\nimport { IProps } from './utils';\nimport TextArea, { ITextAreaProps, TextAreaRef } from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, TextAreaCommandOrchestrator, ICommand } from './commands';\nimport './index.less';\n\nexport type PreviewType = 'live' | 'edit' | 'preview';\n\nexport interface MDEditorProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'>, IProps {\n  /**\n   * The Markdown value.\n   */\n  value?: string;\n  /**\n   * Event handler for the `onChange` event.\n   */\n  onChange?: (value?: string) => void;\n  /**\n   * Can be used to make `Markdown Editor` focus itself on initialization. Defaults to on.\n   * it will be set to true when either the source `textarea` is focused,\n   * or it has an `autofocus` attribute and no other element is focused.\n   */\n  autoFocus?: ITextAreaProps['autoFocus'];\n  /**\n   * The height of the editor.\n   */\n  height?: React.CSSProperties['height'];\n  /**\n   * Show drag and drop tool. Set the height of the editor.\n   */\n  visiableDragbar?: boolean;\n  /**\n   * Show markdown preview.\n   */\n  preview?: PreviewType;\n  fullscreen?: boolean;\n  /**\n   * Maximum drag height. `visiableDragbar=true`\n   */\n  maxHeight?: number;\n  /**\n   * Minimum drag height. `visiableDragbar=true`\n   */\n  minHeight?: number;\n  /**\n   * This is reset [react-markdown](https://github.com/rexxars/react-markdown) settings.\n   */\n  previewOptions?: Omit<MarkdownPreviewProps, 'source'>;\n  /**\n   * Set the `textarea` related props.\n   */\n  textareaProps?: ITextAreaProps;\n  /**\n   * The number of characters to insert when pressing tab key.\n   * Default `2` spaces.\n   */\n  tabSize?: number;\n  /**\n   * You can create your own commands or reuse existing commands.\n   */\n  commands?: ICommand[];\n  /**\n   * Hide the tool bar\n   */\n  hideToolbar?: boolean;\n}\n\nfunction setGroupPopFalse(data: Record<string, boolean>) {\n  Object.keys(data).forEach((keyname) => {\n    data[keyname] = false;\n  });\n  return data;\n}\n\nconst InternalMDEditor = (\n  props: MDEditorProps,\n  ref?: ((instance: HTMLDivElement) => void) | React.RefObject<HTMLDivElement | null> | null,\n) => {\n  const {\n    prefixCls = 'w-md-editor',\n    className,\n    value: propsValue,\n    commands = getCommands(),\n    height: heightWarp = 200,\n    visiableDragbar = true,\n    preview: previewType = 'live',\n    fullscreen: isfullscreen,\n    previewOptions,\n    textareaProps,\n    maxHeight = 1200,\n    minHeight = 100,\n    autoFocus,\n    tabSize = 2,\n    onChange,\n    hideToolbar,\n    ...other\n  } = props || {};\n  const [value, setValue] = useState<string>(propsValue || '');\n  const [preview, setPreview] = useState<PreviewType>(previewType);\n  const [isFullscreen, setIsFullscreen] = useState(isfullscreen || false);\n  const [groupPop, setGroupPop] = useState<Record<string, boolean>>({});\n\n  const leftScroll = useRef(false);\n  const previewRef = React.createRef<MarkdownPreviewRef>();\n\n  const [height, setHeight] = useState(heightWarp);\n  const textarea = React.createRef<TextAreaRef>();\n  const commandOrchestrator = useRef<TextAreaCommandOrchestrator>();\n  const selectionRange = useRef<{ count: number; scrollTop: number }>({ count: 0, scrollTop: 0 });\n\n  const cls = classnames(className, prefixCls, {\n    [`${prefixCls}-show-${preview}`]: preview,\n    [`${prefixCls}-fullscreen`]: isFullscreen,\n  });\n\n  const commandOrchestratorHandle = () => {\n    if (textarea.current && textarea.current.text) {\n      commandOrchestrator.current = new TextAreaCommandOrchestrator(\n        (textarea.current.text || null) as HTMLTextAreaElement,\n      );\n    }\n    return commandOrchestrator.current;\n  };\n\n  useMemo(() => preview !== props.preview && props.preview && setPreview(props.preview!), [props.preview]);\n  useMemo(() => value !== props.value && setValue(props.value!), [props.value]);\n  useMemo(() => height !== props.height && setHeight(heightWarp!), [heightWarp]);\n  function handleTextAreaMount(isMount: boolean) {\n    if (textarea.current && textarea.current.text && textarea.current.warp && isMount) {\n      textarea.current.text.blur();\n      textarea.current.text.focus();\n      textarea.current.text.selectionStart = selectionRange.current.count;\n      textarea.current.text.selectionEnd = selectionRange.current.count;\n      textarea.current.warp.scrollTo(0, selectionRange.current.scrollTop!);\n    }\n  }\n  function modifySelectionRange() {\n    if (textarea.current && textarea.current.text && textarea.current.warp) {\n      selectionRange.current.count = textarea.current.text.selectionStart;\n      selectionRange.current.scrollTop = textarea.current.warp.scrollTop;\n    }\n  }\n  function handleChange(event: React.ChangeEvent<HTMLTextAreaElement>) {\n    modifySelectionRange();\n    setValue(event.target.value!);\n    onChange && onChange(event.target.value || '');\n  }\n  function handleCommand(command: ICommand, groupName?: string) {\n    commandOrchestratorHandle();\n    modifySelectionRange();\n    if (command.keyCommand === 'preview') {\n      setPreview(command.value as PreviewType);\n    }\n    if (command.keyCommand === 'fullscreen') {\n      setIsFullscreen(!isFullscreen);\n      document.body.style.overflow = isFullscreen ? 'initial' : 'hidden';\n    }\n    if (command.keyCommand === 'group') {\n      setGroupPop({ ...setGroupPopFalse(groupPop), [`${groupName}`]: true });\n    }\n    if (groupName && command.keyCommand !== 'group') {\n      setGroupPop({ ...groupPop, [`${groupName}`]: false });\n    }\n    commandOrchestrator.current && commandOrchestrator.current!.executeCommand(command);\n  }\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    if (!textarea.current || !previewRef.current || !previewRef.current.mdp.current || !textarea.current.warp) {\n      return;\n    }\n    const previewDom = previewRef.current.mdp.current;\n    const textareaDom = textarea.current.warp;\n    if (textareaDom && previewDom) {\n      const scale =\n        (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);\n      if (e.target === textareaDom && leftScroll.current) {\n        previewDom.scrollTop = textareaDom.scrollTop / scale;\n      }\n      if (e.target === previewDom && !leftScroll.current) {\n        textareaDom.scrollTop = previewDom.scrollTop * scale;\n      }\n    }\n  }\n  const chestratorObj = useMemo(() => commandOrchestratorHandle(), [textarea.current, commandOrchestrator.current]);\n  const mdProps = ({\n    ...previewOptions,\n    ref: previewRef,\n    onScroll: handleScroll,\n    source: value,\n  } as unknown) as MarkdownPreviewProps;\n  return (\n    <Fragment>\n      <div\n        className={cls}\n        onClick={() => setGroupPop({ ...setGroupPopFalse(groupPop) })}\n        style={{ height: isFullscreen ? '100%' : hideToolbar ? Number(height) - 29 : height }}\n        {...other}\n      >\n        {!hideToolbar && (\n          <Toolbar\n            active={{\n              fullscreen: isFullscreen,\n              preview: preview,\n              ...groupPop,\n            }}\n            prefixCls={prefixCls}\n            commands={commands}\n            commandHelp={{\n              getState: commandOrchestrator.current && commandOrchestrator.current!.getState,\n              textApi: commandOrchestrator.current && commandOrchestrator.current!.textApi,\n              ...chestratorObj,\n            }}\n            onCommand={handleCommand}\n          />\n        )}\n        <div\n          className={`${prefixCls}-content`}\n          style={{ height: isFullscreen ? 'calc(100% - 29px)' : Number(height) - 29 }}\n        >\n          {/(edit|live)/.test(preview as string) && (\n            <TextArea\n              ref={textarea}\n              tabSize={tabSize}\n              className={`${prefixCls}-input`}\n              prefixCls={prefixCls}\n              value={value}\n              autoFocus={autoFocus}\n              {...textareaProps}\n              onScroll={handleScroll}\n              onMouseOver={() => (leftScroll.current = true)}\n              onMouseLeave={() => (leftScroll.current = false)}\n              onMount={handleTextAreaMount}\n              onChange={handleChange}\n            />\n          )}\n          {/(live|preview)/.test(preview as string) && (\n            <MarkdownPreview {...mdProps} className={`${prefixCls}-preview`} />\n          )}\n        </div>\n        {visiableDragbar && !isFullscreen && (\n          <DragBar\n            prefixCls={prefixCls}\n            height={height as number}\n            maxHeight={maxHeight!}\n            minHeight={minHeight!}\n            onChange={(newHeight) => {\n              setHeight(newHeight);\n            }}\n          />\n        )}\n      </div>\n    </Fragment>\n  );\n};\n\nconst MDEditor = React.forwardRef<HTMLDivElement, MDEditorProps>(InternalMDEditor);\n\ntype MDEditor = typeof MDEditor & {\n  Markdown: typeof MarkdownPreview;\n};\n\n(MDEditor as MDEditor).Markdown = MarkdownPreview;\n\nexport default MDEditor as MDEditor;\n"]},"metadata":{},"sourceType":"module"}