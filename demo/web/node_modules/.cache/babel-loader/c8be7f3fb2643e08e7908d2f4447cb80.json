{"ast":null,"code":"/**\n * @typedef {Object} WebpackErrorObj\n * @property {string} moduleIdentifier\n * @property {string} moduleName\n * @property {string} message\n */\nconst friendlySyntaxErrorLabel = 'Syntax error:';\n/**\n * Checks if the error message is for a syntax error.\n * @param {string} message The raw Webpack error message.\n * @returns {boolean} Whether the error message is for a syntax error.\n */\n\nfunction isLikelyASyntaxError(message) {\n  return message.indexOf(friendlySyntaxErrorLabel) !== -1;\n}\n/**\n * Cleans up Webpack error messages.\n *\n * This implementation is based on the one from [create-react-app](https://github.com/facebook/create-react-app/blob/edc671eeea6b7d26ac3f1eb2050e50f75cf9ad5d/packages/react-dev-utils/formatWebpackMessages.js).\n * @param {string} message The raw Webpack error message.\n * @returns {string} The formatted Webpack error message.\n */\n\n\nfunction formatMessage(message) {\n  let lines = message.split('\\n'); // Strip Webpack-added headers off errors/warnings\n  // https://github.com/webpack/webpack/blob/master/lib/ModuleError.js\n\n  lines = lines.filter(function (line) {\n    return !/Module [A-z ]+\\(from/.test(line);\n  }); // Remove leading newline\n\n  if (lines.length > 2 && lines[1].trim() === '') {\n    lines.splice(1, 1);\n  } // Remove duplicated newlines\n\n\n  lines = lines.filter(function (line, index, arr) {\n    return index === 0 || line.trim() !== '' || line.trim() !== arr[index - 1].trim();\n  }); // Clean up the file name\n\n  lines[0] = lines[0].replace(/^(.*) \\d+:\\d+-\\d+$/, '$1'); // Cleans up verbose \"module not found\" messages for files and packages.\n\n  if (lines[1] && lines[1].indexOf('Module not found: ') === 0) {\n    lines = [lines[0], lines[1].replace('Error: ', '').replace('Module not found: Cannot find file:', 'Cannot find file:')];\n  }\n\n  message = lines.join('\\n'); // Clean up syntax errors\n\n  message = message.replace('SyntaxError:', friendlySyntaxErrorLabel); // Internal stacks are generally useless, so we strip them -\n  // except the stacks containing `webpack:`,\n  // because they're normally from user code generated by webpack.\n\n  message = message.replace(/^\\s*at\\s((?!webpack:).)*:\\d+:\\d+[\\s)]*(\\n|$)/gm, ''); // at ... ...:x:y\n\n  message = message.replace(/^\\s*at\\s((?!webpack:).)*<anonymous>[\\s)]*(\\n|$)/gm, ''); // at ... <anonymous>\n\n  message = message.replace(/^\\s*at\\s<anonymous>(\\n|$)/gm, ''); // at <anonymous>\n\n  return message.trim();\n}\n/**\n * Formats Webpack error messages into a more readable format.\n * @param {Array<string | WebpackErrorObj>} errors An array of Webpack error messages.\n * @returns {string[]} The formatted Webpack error messages.\n */\n\n\nfunction formatWebpackErrors(errors) {\n  let formattedErrors = errors.map(function (errorObjOrMessage) {\n    // Webpack 5 compilation errors are in the form of descriptor objects,\n    // so we have to join pieces to get the format we want.\n    if (typeof errorObjOrMessage === 'object') {\n      return formatMessage([errorObjOrMessage.moduleName, errorObjOrMessage.message].join('\\n'));\n    } // Webpack 4 compilation errors are strings\n\n\n    return formatMessage(errorObjOrMessage);\n  });\n\n  if (formattedErrors.some(isLikelyASyntaxError)) {\n    // If there are any syntax errors, show just them.\n    formattedErrors = formattedErrors.filter(isLikelyASyntaxError);\n  }\n\n  return formattedErrors;\n}\n\nmodule.exports = formatWebpackErrors;","map":{"version":3,"sources":["/Users/cpettyjohn/Habbo/instinct/node_modules/@pmmmwh/react-refresh-webpack-plugin/client/utils/formatWebpackErrors.js"],"names":["friendlySyntaxErrorLabel","isLikelyASyntaxError","message","indexOf","formatMessage","lines","split","filter","line","test","length","trim","splice","index","arr","replace","join","formatWebpackErrors","errors","formattedErrors","map","errorObjOrMessage","moduleName","some","module","exports"],"mappings":"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","sourcesContent":["/**\n * @typedef {Object} WebpackErrorObj\n * @property {string} moduleIdentifier\n * @property {string} moduleName\n * @property {string} message\n */\n\nconst friendlySyntaxErrorLabel = 'Syntax error:';\n\n/**\n * Checks if the error message is for a syntax error.\n * @param {string} message The raw Webpack error message.\n * @returns {boolean} Whether the error message is for a syntax error.\n */\nfunction isLikelyASyntaxError(message) {\n  return message.indexOf(friendlySyntaxErrorLabel) !== -1;\n}\n\n/**\n * Cleans up Webpack error messages.\n *\n * This implementation is based on the one from [create-react-app](https://github.com/facebook/create-react-app/blob/edc671eeea6b7d26ac3f1eb2050e50f75cf9ad5d/packages/react-dev-utils/formatWebpackMessages.js).\n * @param {string} message The raw Webpack error message.\n * @returns {string} The formatted Webpack error message.\n */\nfunction formatMessage(message) {\n  let lines = message.split('\\n');\n\n  // Strip Webpack-added headers off errors/warnings\n  // https://github.com/webpack/webpack/blob/master/lib/ModuleError.js\n  lines = lines.filter(function (line) {\n    return !/Module [A-z ]+\\(from/.test(line);\n  });\n\n  // Remove leading newline\n  if (lines.length > 2 && lines[1].trim() === '') {\n    lines.splice(1, 1);\n  }\n\n  // Remove duplicated newlines\n  lines = lines.filter(function (line, index, arr) {\n    return index === 0 || line.trim() !== '' || line.trim() !== arr[index - 1].trim();\n  });\n\n  // Clean up the file name\n  lines[0] = lines[0].replace(/^(.*) \\d+:\\d+-\\d+$/, '$1');\n\n  // Cleans up verbose \"module not found\" messages for files and packages.\n  if (lines[1] && lines[1].indexOf('Module not found: ') === 0) {\n    lines = [\n      lines[0],\n      lines[1]\n        .replace('Error: ', '')\n        .replace('Module not found: Cannot find file:', 'Cannot find file:'),\n    ];\n  }\n\n  message = lines.join('\\n');\n\n  // Clean up syntax errors\n  message = message.replace('SyntaxError:', friendlySyntaxErrorLabel);\n\n  // Internal stacks are generally useless, so we strip them -\n  // except the stacks containing `webpack:`,\n  // because they're normally from user code generated by webpack.\n  message = message.replace(/^\\s*at\\s((?!webpack:).)*:\\d+:\\d+[\\s)]*(\\n|$)/gm, ''); // at ... ...:x:y\n  message = message.replace(/^\\s*at\\s((?!webpack:).)*<anonymous>[\\s)]*(\\n|$)/gm, ''); // at ... <anonymous>\n  message = message.replace(/^\\s*at\\s<anonymous>(\\n|$)/gm, ''); // at <anonymous>\n\n  return message.trim();\n}\n\n/**\n * Formats Webpack error messages into a more readable format.\n * @param {Array<string | WebpackErrorObj>} errors An array of Webpack error messages.\n * @returns {string[]} The formatted Webpack error messages.\n */\nfunction formatWebpackErrors(errors) {\n  let formattedErrors = errors.map(function (errorObjOrMessage) {\n    // Webpack 5 compilation errors are in the form of descriptor objects,\n    // so we have to join pieces to get the format we want.\n    if (typeof errorObjOrMessage === 'object') {\n      return formatMessage([errorObjOrMessage.moduleName, errorObjOrMessage.message].join('\\n'));\n    }\n    // Webpack 4 compilation errors are strings\n    return formatMessage(errorObjOrMessage);\n  });\n  if (formattedErrors.some(isLikelyASyntaxError)) {\n    // If there are any syntax errors, show just them.\n    formattedErrors = formattedErrors.filter(isLikelyASyntaxError);\n  }\n  return formattedErrors;\n}\n\nmodule.exports = formatWebpackErrors;\n"]},"metadata":{},"sourceType":"script"}